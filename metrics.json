This package is entering the deprecation process and will be fully discontinued on July 16th.
You can read more in this blog post https://dcm.dev/blog/2023/06/06/announcing-dcm-free-version-sunset/.

We are grateful to you for being a DCM user. If you are a DCM contributor, you can apply for a special license, feel free to reach out to info@dcm.dev.

If you think DCM is valuable and it helps you, please consider to upgrade to the new Individuals or Teams version.

To hide this message pass the 'disable-sunset-warning' option.

[2K⠙ Analyzing...[2K[2K⠹ Analyzing 9 file(s)... 2.2s[2K⠸ Analyzing 9 file(s)... 9.9s[2K⠼ Analyzing 9 file(s)... 9.9s[2K⠴ Analyzing 9 file(s)... 10.1s[2K⠦ Analyzing 9 file(s)... 42.9s[2K⠧ Analyzing 9 file(s)... 43.0s[2K⠇ Analyzing 9 file(s)... 43.1s[2K⠏ Analyzing 9 file(s)... 43.2s[2K⠋ Analyzing 9 file(s)... 43.2s[2K⠙ Analyzing 9 file(s)... 43.4s[2K⠹ Analyzing 9 file(s)... 43.5s[2K⠸ Analyzing 9 file(s)... 43.5s[2K⠼ Analyzing 9 file(s)... 43.6s[2K⠴ Analyzing 9 file(s)... 43.7s[2K⠦ Analyzing 9 file(s)... 43.8s[2K✔ Analysis is completed. Preparing the results: 43.9s

{"formatVersion":2,"timestamp":"2025-02-23 13:33:59.000","records":[{"path":"lib/models/user.dart","fileMetrics":[{"metricsId":"technical-debt","value":0.0,"level":"none","comment":"This compilation unit has 0.0 swe hours of debt.","context":[]}],"classes":{"User":{"codeSpan":{"start":{"offset":0,"line":1,"column":1},"end":{"offset":332,"line":17,"column":2},"text":"class User {\n  final String id;\n  final String firstName;\n  final String lastName;\n  final String email;\n  final String role; // 担当などの情報\n\n  User({\n    required this.id,\n    required this.firstName,\n    required this.lastName,\n    required this.email,\n    required this.role,\n  });\n\n  String get fullName => '$firstName $lastName';\n}"},"metrics":[{"metricsId":"number-of-methods","value":2,"unitType":"methods","level":"none","comment":"This class has 2 methods.","context":[{"message":"constructor User increase metric value","codeSpan":{"start":{"offset":140,"line":8,"column":3},"end":{"offset":280,"line":14,"column":6},"text":"User({\n    required this.id,\n    required this.firstName,\n    required this.lastName,\n    required this.email,\n    required this.role,\n  });"}},{"message":"getter fullName increase metric value","codeSpan":{"start":{"offset":284,"line":16,"column":3},"end":{"offset":330,"line":16,"column":49},"text":"String get fullName => '$firstName $lastName';"}}]},{"metricsId":"weight-of-class","value":0.0,"level":"none","comment":"This class has a weight of 0.0.","context":[{"message":"public constructor User decrease metric value","codeSpan":{"start":{"offset":140,"line":8,"column":3},"end":{"offset":280,"line":14,"column":6},"text":"User({\n    required this.id,\n    required this.firstName,\n    required this.lastName,\n    required this.email,\n    required this.role,\n  });"}},{"message":"public getter fullName decrease metric value","codeSpan":{"start":{"offset":284,"line":16,"column":3},"end":{"offset":330,"line":16,"column":49},"text":"String get fullName => '$firstName $lastName';"}}]}]}},"functions":{"User.User":{"codeSpan":{"start":{"offset":140,"line":8,"column":3},"end":{"offset":280,"line":14,"column":6},"text":"User({\n    required this.id,\n    required this.firstName,\n    required this.lastName,\n    required this.email,\n    required this.role,\n  });"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This constructor has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":0.0,"level":"none","comment":"This constructor has a halstead volume of 0.0.","context":[]},{"metricsId":"lines-of-code","value":7,"unitType":"lines","level":"none","comment":"This constructor has 7 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":0,"level":"none","comment":"This constructor has a nesting level of 0.","context":[]},{"metricsId":"source-lines-of-code","value":0,"unitType":"lines","level":"none","comment":"This constructor has 0 source lines of code.","context":[]},{"metricsId":"maintainability-index","value":100,"level":"none","comment":"This constructor has 100 maintainability index.","context":[]}]},"User.fullName":{"codeSpan":{"start":{"offset":284,"line":16,"column":3},"end":{"offset":330,"line":16,"column":49},"text":"String get fullName => '$firstName $lastName';"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This getter has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":2.0,"level":"none","comment":"This getter has a halstead volume of 2.0.","context":[]},{"metricsId":"lines-of-code","value":1,"unitType":"line","level":"none","comment":"This getter has 1 line of code.","context":[]},{"metricsId":"maximum-nesting-level","value":0,"level":"none","comment":"This getter has a nesting level of 0.","context":[]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This getter has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":1,"unitType":"line","level":"none","comment":"This getter has 1 source line of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":282,"line":16,"column":0},"end":{"offset":282,"line":16,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":98,"level":"none","comment":"This getter has 98 maintainability index.","context":[]}]},"getUserName":{"codeSpan":{"start":{"offset":400,"line":21,"column":1},"end":{"offset":619,"line":26,"column":2},"text":"String getUserName(String userId, List<User> users) {\n  return users.firstWhere(\n    (user) => user.id == userId,\n    orElse: () => User(id: userId, firstName: userId, lastName: '', email: '', role: ''),\n  ).fullName;\n}"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This function has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":107.31275182609167,"level":"none","comment":"This function has a halstead volume of 107.31275182609167.","context":[]},{"metricsId":"lines-of-code","value":6,"unitType":"lines","level":"none","comment":"This function has 6 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":1,"level":"none","comment":"This function has a nesting level of 1.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":452,"line":21,"column":53},"end":{"offset":619,"line":26,"column":2},"text":"{\n  return users.firstWhere(\n    (user) => user.id == userId,\n    orElse: () => User(id: userId, firstName: userId, lastName: '', email: '', role: ''),\n  ).fullName;\n}"}}]},{"metricsId":"number-of-parameters","value":2,"level":"none","comment":"This function has 2 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":4,"unitType":"lines","level":"none","comment":"This function has 4 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":454,"line":22,"column":0},"end":{"offset":454,"line":22,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":481,"line":23,"column":0},"end":{"offset":481,"line":23,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":514,"line":24,"column":0},"end":{"offset":514,"line":24,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":604,"line":25,"column":0},"end":{"offset":604,"line":25,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":73,"level":"none","comment":"This function has 73 maintainability index.","context":[]}]}},"issues":[],"antiPatternCases":[]},{"path":"lib/models/instrument.dart","fileMetrics":[{"metricsId":"technical-debt","value":0.0,"level":"none","comment":"This compilation unit has 0.0 swe hours of debt.","context":[]}],"classes":{"Instrument":{"codeSpan":{"start":{"offset":0,"line":1,"column":1},"end":{"offset":821,"line":30,"column":2},"text":"class Instrument {\n  final List<String> ownerIds; // 所有者のID一覧\n  final int quantity; // 所持数\n  final String model; // モデル\n  final String storageLocation; // 保管場所\n  final DateTime purchaseDate; // 購入日\n  final double wearDegree; // 損耗度（例：0.2=20%）\n  final List<String> maintenanceHistory; // メンテナンス履歴\n\n  Instrument({\n    required this.ownerIds,\n    required this.quantity,\n    required this.model,\n    required this.storageLocation,\n    required this.purchaseDate,\n    required this.wearDegree,\n    required this.maintenanceHistory,\n  });\n\n  // 最後のメンテナンス日（履歴の最新レコードの日付）を返す\n  DateTime? get lastMaintenanceDate {\n    if (maintenanceHistory.isEmpty) return null;\n    try {\n      // \"YYYY-MM-DD: ...\" フォーマットと仮定\n      return DateTime.parse(maintenanceHistory.last.split(':').first);\n    } catch (e) {\n      return null;\n    }\n  }\n}"},"metrics":[{"metricsId":"number-of-methods","value":2,"unitType":"methods","level":"none","comment":"This class has 2 methods.","context":[{"message":"constructor Instrument increase metric value","codeSpan":{"start":{"offset":299,"line":10,"column":3},"end":{"offset":533,"line":18,"column":6},"text":"Instrument({\n    required this.ownerIds,\n    required this.quantity,\n    required this.model,\n    required this.storageLocation,\n    required this.purchaseDate,\n    required this.wearDegree,\n    required this.maintenanceHistory,\n  });"}},{"message":"getter lastMaintenanceDate increase metric value","codeSpan":{"start":{"offset":570,"line":21,"column":3},"end":{"offset":819,"line":29,"column":4},"text":"DateTime? get lastMaintenanceDate {\n    if (maintenanceHistory.isEmpty) return null;\n    try {\n      // \"YYYY-MM-DD: ...\" フォーマットと仮定\n      return DateTime.parse(maintenanceHistory.last.split(':').first);\n    } catch (e) {\n      return null;\n    }\n  }"}}]},{"metricsId":"weight-of-class","value":0.0,"level":"none","comment":"This class has a weight of 0.0.","context":[{"message":"public constructor Instrument decrease metric value","codeSpan":{"start":{"offset":299,"line":10,"column":3},"end":{"offset":533,"line":18,"column":6},"text":"Instrument({\n    required this.ownerIds,\n    required this.quantity,\n    required this.model,\n    required this.storageLocation,\n    required this.purchaseDate,\n    required this.wearDegree,\n    required this.maintenanceHistory,\n  });"}},{"message":"public getter lastMaintenanceDate decrease metric value","codeSpan":{"start":{"offset":570,"line":21,"column":3},"end":{"offset":819,"line":29,"column":4},"text":"DateTime? get lastMaintenanceDate {\n    if (maintenanceHistory.isEmpty) return null;\n    try {\n      // \"YYYY-MM-DD: ...\" フォーマットと仮定\n      return DateTime.parse(maintenanceHistory.last.split(':').first);\n    } catch (e) {\n      return null;\n    }\n  }"}}]}]}},"functions":{"Instrument.Instrument":{"codeSpan":{"start":{"offset":299,"line":10,"column":3},"end":{"offset":533,"line":18,"column":6},"text":"Instrument({\n    required this.ownerIds,\n    required this.quantity,\n    required this.model,\n    required this.storageLocation,\n    required this.purchaseDate,\n    required this.wearDegree,\n    required this.maintenanceHistory,\n  });"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This constructor has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":0.0,"level":"none","comment":"This constructor has a halstead volume of 0.0.","context":[]},{"metricsId":"lines-of-code","value":9,"unitType":"lines","level":"none","comment":"This constructor has 9 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":0,"level":"none","comment":"This constructor has a nesting level of 0.","context":[]},{"metricsId":"source-lines-of-code","value":0,"unitType":"lines","level":"none","comment":"This constructor has 0 source lines of code.","context":[]},{"metricsId":"maintainability-index","value":100,"level":"none","comment":"This constructor has 100 maintainability index.","context":[]}]},"Instrument.lastMaintenanceDate":{"codeSpan":{"start":{"offset":570,"line":21,"column":3},"end":{"offset":819,"line":29,"column":4},"text":"DateTime? get lastMaintenanceDate {\n    if (maintenanceHistory.isEmpty) return null;\n    try {\n      // \"YYYY-MM-DD: ...\" フォーマットと仮定\n      return DateTime.parse(maintenanceHistory.last.split(':').first);\n    } catch (e) {\n      return null;\n    }\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":3,"level":"none","comment":"This getter has a cyclomatic complexity of 3.","context":[{"message":"If statement increases complexity","codeSpan":{"start":{"offset":610,"line":22,"column":5},"end":{"offset":654,"line":22,"column":49},"text":"if (maintenanceHistory.isEmpty) return null;"}},{"message":"Catch clause increases complexity","codeSpan":{"start":{"offset":779,"line":26,"column":7},"end":{"offset":815,"line":28,"column":6},"text":"catch (e) {\n      return null;\n    }"}}]},{"metricsId":"halstead-volume","value":27.0,"level":"none","comment":"This getter has a halstead volume of 27.0.","context":[]},{"metricsId":"lines-of-code","value":9,"unitType":"lines","level":"none","comment":"This getter has 9 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":2,"level":"none","comment":"This getter has a nesting level of 2.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":604,"line":21,"column":37},"end":{"offset":819,"line":29,"column":4},"text":"{\n    if (maintenanceHistory.isEmpty) return null;\n    try {\n      // \"YYYY-MM-DD: ...\" フォーマットと仮定\n      return DateTime.parse(maintenanceHistory.last.split(':').first);\n    } catch (e) {\n      return null;\n    }\n  }"}},{"message":"Try statement increases depth","codeSpan":{"start":{"offset":663,"line":23,"column":9},"end":{"offset":778,"line":26,"column":6},"text":"{\n      // \"YYYY-MM-DD: ...\" フォーマットと仮定\n      return DateTime.parse(maintenanceHistory.last.split(':').first);\n    }"}}]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This getter has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":6,"unitType":"lines","level":"none","comment":"This getter has 6 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":606,"line":22,"column":0},"end":{"offset":606,"line":22,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":655,"line":23,"column":0},"end":{"offset":655,"line":23,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":702,"line":25,"column":0},"end":{"offset":702,"line":25,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":773,"line":26,"column":0},"end":{"offset":773,"line":26,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":791,"line":27,"column":0},"end":{"offset":791,"line":27,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":810,"line":28,"column":0},"end":{"offset":810,"line":28,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":73,"level":"none","comment":"This getter has 73 maintainability index.","context":[]}]}},"issues":[],"antiPatternCases":[]},{"path":"lib/screens/user_list_screen.dart","fileMetrics":[{"metricsId":"technical-debt","value":0.0,"level":"none","comment":"This compilation unit has 0.0 swe hours of debt.","context":[]}],"classes":{"UserListScreen":{"codeSpan":{"start":{"offset":140,"line":6,"column":1},"end":{"offset":1586,"line":53,"column":2},"text":"class UserListScreen extends StatelessWidget {\n  final List<User> mockUsers;\n\n  const UserListScreen({Key? key, required this.mockUsers}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('ユーザー一覧')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: DataTable(\n          columns: [\n            DataColumn(label: Text('姓名')),\n            DataColumn(label: Text('メールアドレス')),\n            DataColumn(label: Text('担当')),\n          ],\n          rows: mockUsers.map((user) {\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(builder: (context) => UserEditScreen(user: user)),\n                      );\n                    },\n                    child: Text(\n                      user.fullName,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(Text(user.email)),\n                DataCell(Text(user.role)),\n              ],\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }\n}"},"metrics":[{"metricsId":"number-of-methods","value":2,"unitType":"methods","level":"none","comment":"This class has 2 methods.","context":[{"message":"constructor UserListScreen increase metric value","codeSpan":{"start":{"offset":220,"line":9,"column":3},"end":{"offset":296,"line":9,"column":79},"text":"const UserListScreen({Key? key, required this.mockUsers}) : super(key: key);"}},{"message":"method build increase metric value","codeSpan":{"start":{"offset":312,"line":12,"column":3},"end":{"offset":1584,"line":52,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('ユーザー一覧')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: DataTable(\n          columns: [\n            DataColumn(label: Text('姓名')),\n            DataColumn(label: Text('メールアドレス')),\n            DataColumn(label: Text('担当')),\n          ],\n          rows: mockUsers.map((user) {\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(builder: (context) => UserEditScreen(user: user)),\n                      );\n                    },\n                    child: Text(\n                      user.fullName,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(Text(user.email)),\n                DataCell(Text(user.role)),\n              ],\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }"}}]},{"metricsId":"weight-of-class","value":0.5,"level":"none","comment":"This class has a weight of 0.5.","context":[{"message":"public constructor UserListScreen decrease metric value","codeSpan":{"start":{"offset":220,"line":9,"column":3},"end":{"offset":296,"line":9,"column":79},"text":"const UserListScreen({Key? key, required this.mockUsers}) : super(key: key);"}},{"message":"functional method build increase metric value","codeSpan":{"start":{"offset":312,"line":12,"column":3},"end":{"offset":1584,"line":52,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('ユーザー一覧')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: DataTable(\n          columns: [\n            DataColumn(label: Text('姓名')),\n            DataColumn(label: Text('メールアドレス')),\n            DataColumn(label: Text('担当')),\n          ],\n          rows: mockUsers.map((user) {\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(builder: (context) => UserEditScreen(user: user)),\n                      );\n                    },\n                    child: Text(\n                      user.fullName,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(Text(user.email)),\n                DataCell(Text(user.role)),\n              ],\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }"}}]}]}},"functions":{"UserListScreen.UserListScreen":{"codeSpan":{"start":{"offset":220,"line":9,"column":3},"end":{"offset":296,"line":9,"column":79},"text":"const UserListScreen({Key? key, required this.mockUsers}) : super(key: key);"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This constructor has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":0.0,"level":"none","comment":"This constructor has a halstead volume of 0.0.","context":[]},{"metricsId":"lines-of-code","value":1,"unitType":"line","level":"none","comment":"This constructor has 1 line of code.","context":[]},{"metricsId":"maximum-nesting-level","value":0,"level":"none","comment":"This constructor has a nesting level of 0.","context":[]},{"metricsId":"source-lines-of-code","value":0,"unitType":"lines","level":"none","comment":"This constructor has 0 source lines of code.","context":[]},{"metricsId":"maintainability-index","value":100,"level":"none","comment":"This constructor has 100 maintainability index.","context":[]}]},"UserListScreen.build":{"codeSpan":{"start":{"offset":312,"line":12,"column":3},"end":{"offset":1584,"line":52,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('ユーザー一覧')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: DataTable(\n          columns: [\n            DataColumn(label: Text('姓名')),\n            DataColumn(label: Text('メールアドレス')),\n            DataColumn(label: Text('担当')),\n          ],\n          rows: mockUsers.map((user) {\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(builder: (context) => UserEditScreen(user: user)),\n                      );\n                    },\n                    child: Text(\n                      user.fullName,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(Text(user.email)),\n                DataCell(Text(user.role)),\n              ],\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":595.0780464314654,"level":"none","comment":"This method has a halstead volume of 595.0780464314654.","context":[]},{"metricsId":"lines-of-code","value":42,"unitType":"lines","level":"none","comment":"This method has 42 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":3,"level":"none","comment":"This method has a nesting level of 3.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":347,"line":12,"column":38},"end":{"offset":1584,"line":52,"column":4},"text":"{\n    return Scaffold(\n      appBar: AppBar(title: Text('ユーザー一覧')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: DataTable(\n          columns: [\n            DataColumn(label: Text('姓名')),\n            DataColumn(label: Text('メールアドレス')),\n            DataColumn(label: Text('担当')),\n          ],\n          rows: mockUsers.map((user) {\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(builder: (context) => UserEditScreen(user: user)),\n                      );\n                    },\n                    child: Text(\n                      user.fullName,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(Text(user.email)),\n                DataCell(Text(user.role)),\n              ],\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":750,"line":24,"column":38},"end":{"offset":1542,"line":48,"column":12},"text":"{\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(builder: (context) => UserEditScreen(user: user)),\n                      );\n                    },\n                    child: Text(\n                      user.fullName,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(Text(user.email)),\n                DataCell(Text(user.role)),\n              ],\n            );\n          }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":894,"line":29,"column":31},"end":{"offset":1106,"line":34,"column":22},"text":"{\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(builder: (context) => UserEditScreen(user: user)),\n                      );\n                    }"}}]},{"metricsId":"number-of-parameters","value":1,"level":"none","comment":"This method has 1 parameter.","context":[]},{"metricsId":"source-lines-of-code","value":39,"unitType":"lines","level":"none","comment":"This method has 39 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":349,"line":13,"column":0},"end":{"offset":349,"line":13,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":370,"line":14,"column":0},"end":{"offset":370,"line":14,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":415,"line":15,"column":0},"end":{"offset":415,"line":15,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":442,"line":16,"column":0},"end":{"offset":442,"line":16,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":477,"line":17,"column":0},"end":{"offset":477,"line":17,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":519,"line":18,"column":0},"end":{"offset":519,"line":18,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":545,"line":19,"column":0},"end":{"offset":545,"line":19,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":566,"line":20,"column":0},"end":{"offset":566,"line":20,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":609,"line":21,"column":0},"end":{"offset":609,"line":21,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":657,"line":22,"column":0},"end":{"offset":657,"line":22,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":700,"line":23,"column":0},"end":{"offset":700,"line":23,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":713,"line":24,"column":0},"end":{"offset":713,"line":24,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":752,"line":25,"column":0},"end":{"offset":752,"line":25,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":780,"line":26,"column":0},"end":{"offset":780,"line":26,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":803,"line":27,"column":0},"end":{"offset":803,"line":27,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":829,"line":28,"column":0},"end":{"offset":829,"line":28,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":864,"line":29,"column":0},"end":{"offset":864,"line":29,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":896,"line":30,"column":0},"end":{"offset":896,"line":30,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":934,"line":31,"column":0},"end":{"offset":934,"line":31,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":967,"line":32,"column":0},"end":{"offset":967,"line":32,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1060,"line":33,"column":0},"end":{"offset":1060,"line":33,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1085,"line":34,"column":0},"end":{"offset":1085,"line":34,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1108,"line":35,"column":0},"end":{"offset":1108,"line":35,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1141,"line":36,"column":0},"end":{"offset":1141,"line":36,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1178,"line":37,"column":0},"end":{"offset":1178,"line":37,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1218,"line":38,"column":0},"end":{"offset":1218,"line":38,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1262,"line":39,"column":0},"end":{"offset":1262,"line":39,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1324,"line":40,"column":0},"end":{"offset":1324,"line":40,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1349,"line":41,"column":0},"end":{"offset":1349,"line":41,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1372,"line":42,"column":0},"end":{"offset":1372,"line":42,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1393,"line":43,"column":0},"end":{"offset":1393,"line":43,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1412,"line":44,"column":0},"end":{"offset":1412,"line":44,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1456,"line":45,"column":0},"end":{"offset":1456,"line":45,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1499,"line":46,"column":0},"end":{"offset":1499,"line":46,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1516,"line":47,"column":0},"end":{"offset":1516,"line":47,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1531,"line":48,"column":0},"end":{"offset":1531,"line":48,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1554,"line":49,"column":0},"end":{"offset":1554,"line":49,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1565,"line":50,"column":0},"end":{"offset":1565,"line":50,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1574,"line":51,"column":0},"end":{"offset":1574,"line":51,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":46,"level":"none","comment":"This method has 46 maintainability index.","context":[]}]}},"issues":[],"antiPatternCases":[]},{"path":"lib/screens/dashboard_screen.dart","fileMetrics":[{"metricsId":"technical-debt","value":0.0,"level":"none","comment":"This compilation unit has 0.0 swe hours of debt.","context":[]}],"classes":{"DashboardScreen":{"codeSpan":{"start":{"offset":144,"line":6,"column":1},"end":{"offset":4911,"line":140,"column":2},"text":"class DashboardScreen extends StatelessWidget {\n  final List<User> mockUsers;\n  final List<Instrument> mockInstruments;\n\n  const DashboardScreen({\n    Key? key,\n    required this.mockUsers,\n    required this.mockInstruments,\n  }) : super(key: key);\n\n  // ユーザー別楽器所持数を計算\n  Map<String, int> getOwnerInstrumentCount() {\n    Map<String, int> counts = {};\n    for (var instrument in mockInstruments) {\n      for (var ownerId in instrument.ownerIds) {\n        counts[ownerId] = (counts[ownerId] ?? 0) + instrument.quantity;\n      }\n    }\n    return counts;\n  }\n\n  // 最終メンテナンスが古い順に並べ替え\n  List<Instrument> get sortedByOldMaintenance {\n    List<Instrument> instruments = List.from(mockInstruments);\n    instruments.sort((a, b) {\n      DateTime? dateA = a.lastMaintenanceDate;\n      DateTime? dateB = b.lastMaintenanceDate;\n      if (dateA == null && dateB == null) return 0;\n      if (dateA == null) return 1;\n      if (dateB == null) return -1;\n      return dateA.compareTo(dateB);\n    });\n    return instruments;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final ownerCounts = getOwnerInstrumentCount();\n    final sortedMaintenance = sortedByOldMaintenance;\n\n    return Scaffold(\n      appBar: AppBar(title: Text('ホームダッシュボード')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        padding: EdgeInsets.all(16),\n        child: Container(\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // 全体概要\n              Container(\n                width: double.infinity,\n                padding: EdgeInsets.all(16),\n                decoration: BoxDecoration(\n                  color: Colors.blue[100],\n                  borderRadius: BorderRadius.circular(8),\n                ),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      '全体の楽器状況概要',\n                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n                    ),\n                    SizedBox(height: 8),\n                    Text('登録楽器数: ${mockInstruments.length}', style: TextStyle(fontSize: 16)),\n                  ],\n                ),\n              ),\n              SizedBox(height: 20),\n              // 所有者別レポート\n              Card(\n                elevation: 4,\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        '所有者別楽器数',\n                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                      ),\n                      SizedBox(height: 8),\n                      Column(\n                        children: ownerCounts.entries.map((entry) {\n                          String fullName = mockUsers.firstWhere(\n                            (user) => user.id == entry.key,\n                            orElse: () => User(id: entry.key, firstName: entry.key, lastName: '', email: '', role: ''),\n                          ).fullName;\n                          return ListTile(\n                            title: Text(fullName),\n                            trailing: Text('${entry.value} 台'),\n                          );\n                        }).toList(),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              SizedBox(height: 20),\n              // メンテナンスが古い楽器一覧レポート\n              Card(\n                elevation: 4,\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        'メンテナンスが古い楽器一覧',\n                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                      ),\n                      SizedBox(height: 8),\n                      Column(\n                        children: sortedMaintenance.map((instrument) {\n                          return ListTile(\n                            title: Text(instrument.model),\n                            subtitle: Text('最終メンテナンス: ' +\n                                (instrument.lastMaintenanceDate != null\n                                    ? instrument.lastMaintenanceDate!.toLocal().toString().split(\" \")[0]\n                                    : \"記録なし\")),\n                          );\n                        }).toList(),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}"},"metrics":[{"metricsId":"number-of-methods","value":4,"unitType":"methods","level":"none","comment":"This class has 4 methods.","context":[{"message":"constructor DashboardScreen increase metric value","codeSpan":{"start":{"offset":267,"line":10,"column":3},"end":{"offset":392,"line":14,"column":24},"text":"const DashboardScreen({\n    Key? key,\n    required this.mockUsers,\n    required this.mockInstruments,\n  }) : super(key: key);"}},{"message":"method getOwnerInstrumentCount increase metric value","codeSpan":{"start":{"offset":415,"line":17,"column":3},"end":{"offset":697,"line":25,"column":4},"text":"Map<String, int> getOwnerInstrumentCount() {\n    Map<String, int> counts = {};\n    for (var instrument in mockInstruments) {\n      for (var ownerId in instrument.ownerIds) {\n        counts[ownerId] = (counts[ownerId] ?? 0) + instrument.quantity;\n      }\n    }\n    return counts;\n  }"}},{"message":"getter sortedByOldMaintenance increase metric value","codeSpan":{"start":{"offset":724,"line":28,"column":3},"end":{"offset":1152,"line":39,"column":4},"text":"List<Instrument> get sortedByOldMaintenance {\n    List<Instrument> instruments = List.from(mockInstruments);\n    instruments.sort((a, b) {\n      DateTime? dateA = a.lastMaintenanceDate;\n      DateTime? dateB = b.lastMaintenanceDate;\n      if (dateA == null && dateB == null) return 0;\n      if (dateA == null) return 1;\n      if (dateB == null) return -1;\n      return dateA.compareTo(dateB);\n    });\n    return instruments;\n  }"}},{"message":"method build increase metric value","codeSpan":{"start":{"offset":1168,"line":42,"column":3},"end":{"offset":4909,"line":139,"column":4},"text":"Widget build(BuildContext context) {\n    final ownerCounts = getOwnerInstrumentCount();\n    final sortedMaintenance = sortedByOldMaintenance;\n\n    return Scaffold(\n      appBar: AppBar(title: Text('ホームダッシュボード')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        padding: EdgeInsets.all(16),\n        child: Container(\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // 全体概要\n              Container(\n                width: double.infinity,\n                padding: EdgeInsets.all(16),\n                decoration: BoxDecoration(\n                  color: Colors.blue[100],\n                  borderRadius: BorderRadius.circular(8),\n                ),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      '全体の楽器状況概要',\n                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n                    ),\n                    SizedBox(height: 8),\n                    Text('登録楽器数: ${mockInstruments.length}', style: TextStyle(fontSize: 16)),\n                  ],\n                ),\n              ),\n              SizedBox(height: 20),\n              // 所有者別レポート\n              Card(\n                elevation: 4,\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        '所有者別楽器数',\n                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                      ),\n                      SizedBox(height: 8),\n                      Column(\n                        children: ownerCounts.entries.map((entry) {\n                          String fullName = mockUsers.firstWhere(\n                            (user) => user.id == entry.key,\n                            orElse: () => User(id: entry.key, firstName: entry.key, lastName: '', email: '', role: ''),\n                          ).fullName;\n                          return ListTile(\n                            title: Text(fullName),\n                            trailing: Text('${entry.value} 台'),\n                          );\n                        }).toList(),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              SizedBox(height: 20),\n              // メンテナンスが古い楽器一覧レポート\n              Card(\n                elevation: 4,\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        'メンテナンスが古い楽器一覧',\n                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                      ),\n                      SizedBox(height: 8),\n                      Column(\n                        children: sortedMaintenance.map((instrument) {\n                          return ListTile(\n                            title: Text(instrument.model),\n                            subtitle: Text('最終メンテナンス: ' +\n                                (instrument.lastMaintenanceDate != null\n                                    ? instrument.lastMaintenanceDate!.toLocal().toString().split(\" \")[0]\n                                    : \"記録なし\")),\n                          );\n                        }).toList(),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"}}]},{"metricsId":"weight-of-class","value":0.5,"level":"none","comment":"This class has a weight of 0.5.","context":[{"message":"public constructor DashboardScreen decrease metric value","codeSpan":{"start":{"offset":267,"line":10,"column":3},"end":{"offset":392,"line":14,"column":24},"text":"const DashboardScreen({\n    Key? key,\n    required this.mockUsers,\n    required this.mockInstruments,\n  }) : super(key: key);"}},{"message":"functional method getOwnerInstrumentCount increase metric value","codeSpan":{"start":{"offset":415,"line":17,"column":3},"end":{"offset":697,"line":25,"column":4},"text":"Map<String, int> getOwnerInstrumentCount() {\n    Map<String, int> counts = {};\n    for (var instrument in mockInstruments) {\n      for (var ownerId in instrument.ownerIds) {\n        counts[ownerId] = (counts[ownerId] ?? 0) + instrument.quantity;\n      }\n    }\n    return counts;\n  }"}},{"message":"public getter sortedByOldMaintenance decrease metric value","codeSpan":{"start":{"offset":724,"line":28,"column":3},"end":{"offset":1152,"line":39,"column":4},"text":"List<Instrument> get sortedByOldMaintenance {\n    List<Instrument> instruments = List.from(mockInstruments);\n    instruments.sort((a, b) {\n      DateTime? dateA = a.lastMaintenanceDate;\n      DateTime? dateB = b.lastMaintenanceDate;\n      if (dateA == null && dateB == null) return 0;\n      if (dateA == null) return 1;\n      if (dateB == null) return -1;\n      return dateA.compareTo(dateB);\n    });\n    return instruments;\n  }"}},{"message":"functional method build increase metric value","codeSpan":{"start":{"offset":1168,"line":42,"column":3},"end":{"offset":4909,"line":139,"column":4},"text":"Widget build(BuildContext context) {\n    final ownerCounts = getOwnerInstrumentCount();\n    final sortedMaintenance = sortedByOldMaintenance;\n\n    return Scaffold(\n      appBar: AppBar(title: Text('ホームダッシュボード')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        padding: EdgeInsets.all(16),\n        child: Container(\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // 全体概要\n              Container(\n                width: double.infinity,\n                padding: EdgeInsets.all(16),\n                decoration: BoxDecoration(\n                  color: Colors.blue[100],\n                  borderRadius: BorderRadius.circular(8),\n                ),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      '全体の楽器状況概要',\n                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n                    ),\n                    SizedBox(height: 8),\n                    Text('登録楽器数: ${mockInstruments.length}', style: TextStyle(fontSize: 16)),\n                  ],\n                ),\n              ),\n              SizedBox(height: 20),\n              // 所有者別レポート\n              Card(\n                elevation: 4,\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        '所有者別楽器数',\n                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                      ),\n                      SizedBox(height: 8),\n                      Column(\n                        children: ownerCounts.entries.map((entry) {\n                          String fullName = mockUsers.firstWhere(\n                            (user) => user.id == entry.key,\n                            orElse: () => User(id: entry.key, firstName: entry.key, lastName: '', email: '', role: ''),\n                          ).fullName;\n                          return ListTile(\n                            title: Text(fullName),\n                            trailing: Text('${entry.value} 台'),\n                          );\n                        }).toList(),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              SizedBox(height: 20),\n              // メンテナンスが古い楽器一覧レポート\n              Card(\n                elevation: 4,\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        'メンテナンスが古い楽器一覧',\n                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                      ),\n                      SizedBox(height: 8),\n                      Column(\n                        children: sortedMaintenance.map((instrument) {\n                          return ListTile(\n                            title: Text(instrument.model),\n                            subtitle: Text('最終メンテナンス: ' +\n                                (instrument.lastMaintenanceDate != null\n                                    ? instrument.lastMaintenanceDate!.toLocal().toString().split(\" \")[0]\n                                    : \"記録なし\")),\n                          );\n                        }).toList(),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"}}]}]}},"functions":{"DashboardScreen.DashboardScreen":{"codeSpan":{"start":{"offset":267,"line":10,"column":3},"end":{"offset":392,"line":14,"column":24},"text":"const DashboardScreen({\n    Key? key,\n    required this.mockUsers,\n    required this.mockInstruments,\n  }) : super(key: key);"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This constructor has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":0.0,"level":"none","comment":"This constructor has a halstead volume of 0.0.","context":[]},{"metricsId":"lines-of-code","value":5,"unitType":"lines","level":"none","comment":"This constructor has 5 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":0,"level":"none","comment":"This constructor has a nesting level of 0.","context":[]},{"metricsId":"source-lines-of-code","value":0,"unitType":"lines","level":"none","comment":"This constructor has 0 source lines of code.","context":[]},{"metricsId":"maintainability-index","value":100,"level":"none","comment":"This constructor has 100 maintainability index.","context":[]}]},"DashboardScreen.getOwnerInstrumentCount":{"codeSpan":{"start":{"offset":415,"line":17,"column":3},"end":{"offset":697,"line":25,"column":4},"text":"Map<String, int> getOwnerInstrumentCount() {\n    Map<String, int> counts = {};\n    for (var instrument in mockInstruments) {\n      for (var ownerId in instrument.ownerIds) {\n        counts[ownerId] = (counts[ownerId] ?? 0) + instrument.quantity;\n      }\n    }\n    return counts;\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":4,"level":"none","comment":"This method has a cyclomatic complexity of 4.","context":[{"message":"For statement increases complexity","codeSpan":{"start":{"offset":498,"line":19,"column":5},"end":{"offset":674,"line":23,"column":6},"text":"for (var instrument in mockInstruments) {\n      for (var ownerId in instrument.ownerIds) {\n        counts[ownerId] = (counts[ownerId] ?? 0) + instrument.quantity;\n      }\n    }"}},{"message":"For statement increases complexity","codeSpan":{"start":{"offset":546,"line":20,"column":7},"end":{"offset":668,"line":22,"column":8},"text":"for (var ownerId in instrument.ownerIds) {\n        counts[ownerId] = (counts[ownerId] ?? 0) + instrument.quantity;\n      }"}},{"message":"Operator ?? increases complexity","codeSpan":{"start":{"offset":632,"line":21,"column":44},"end":{"offset":634,"line":21,"column":46},"text":"??"}}]},{"metricsId":"halstead-volume","value":83.76180828526728,"level":"none","comment":"This method has a halstead volume of 83.76180828526728.","context":[]},{"metricsId":"lines-of-code","value":9,"unitType":"lines","level":"none","comment":"This method has 9 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":3,"level":"none","comment":"This method has a nesting level of 3.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":458,"line":17,"column":46},"end":{"offset":697,"line":25,"column":4},"text":"{\n    Map<String, int> counts = {};\n    for (var instrument in mockInstruments) {\n      for (var ownerId in instrument.ownerIds) {\n        counts[ownerId] = (counts[ownerId] ?? 0) + instrument.quantity;\n      }\n    }\n    return counts;\n  }"}},{"message":"For statement increases depth","codeSpan":{"start":{"offset":538,"line":19,"column":45},"end":{"offset":674,"line":23,"column":6},"text":"{\n      for (var ownerId in instrument.ownerIds) {\n        counts[ownerId] = (counts[ownerId] ?? 0) + instrument.quantity;\n      }\n    }"}},{"message":"For statement increases depth","codeSpan":{"start":{"offset":587,"line":20,"column":48},"end":{"offset":668,"line":22,"column":8},"text":"{\n        counts[ownerId] = (counts[ownerId] ?? 0) + instrument.quantity;\n      }"}}]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This method has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":7,"unitType":"lines","level":"none","comment":"This method has 7 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":460,"line":18,"column":0},"end":{"offset":460,"line":18,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":494,"line":19,"column":0},"end":{"offset":494,"line":19,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":540,"line":20,"column":0},"end":{"offset":540,"line":20,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":589,"line":21,"column":0},"end":{"offset":589,"line":21,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":661,"line":22,"column":0},"end":{"offset":661,"line":22,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":669,"line":23,"column":0},"end":{"offset":669,"line":23,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":675,"line":24,"column":0},"end":{"offset":675,"line":24,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":68,"level":"none","comment":"This method has 68 maintainability index.","context":[]}]},"DashboardScreen.sortedByOldMaintenance":{"codeSpan":{"start":{"offset":724,"line":28,"column":3},"end":{"offset":1152,"line":39,"column":4},"text":"List<Instrument> get sortedByOldMaintenance {\n    List<Instrument> instruments = List.from(mockInstruments);\n    instruments.sort((a, b) {\n      DateTime? dateA = a.lastMaintenanceDate;\n      DateTime? dateB = b.lastMaintenanceDate;\n      if (dateA == null && dateB == null) return 0;\n      if (dateA == null) return 1;\n      if (dateB == null) return -1;\n      return dateA.compareTo(dateB);\n    });\n    return instruments;\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":5,"level":"none","comment":"This getter has a cyclomatic complexity of 5.","context":[{"message":"If statement increases complexity","codeSpan":{"start":{"offset":963,"line":33,"column":7},"end":{"offset":1008,"line":33,"column":52},"text":"if (dateA == null && dateB == null) return 0;"}},{"message":"Operator && increases complexity","codeSpan":{"start":{"offset":981,"line":33,"column":25},"end":{"offset":983,"line":33,"column":27},"text":"&&"}},{"message":"If statement increases complexity","codeSpan":{"start":{"offset":1015,"line":34,"column":7},"end":{"offset":1043,"line":34,"column":35},"text":"if (dateA == null) return 1;"}},{"message":"If statement increases complexity","codeSpan":{"start":{"offset":1050,"line":35,"column":7},"end":{"offset":1079,"line":35,"column":36},"text":"if (dateB == null) return -1;"}}]},{"metricsId":"halstead-volume","value":276.6033980727912,"level":"none","comment":"This getter has a halstead volume of 276.6033980727912.","context":[]},{"metricsId":"lines-of-code","value":12,"unitType":"lines","level":"none","comment":"This getter has 12 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":2,"level":"none","comment":"This getter has a nesting level of 2.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":768,"line":28,"column":47},"end":{"offset":1152,"line":39,"column":4},"text":"{\n    List<Instrument> instruments = List.from(mockInstruments);\n    instruments.sort((a, b) {\n      DateTime? dateA = a.lastMaintenanceDate;\n      DateTime? dateB = b.lastMaintenanceDate;\n      if (dateA == null && dateB == null) return 0;\n      if (dateA == null) return 1;\n      if (dateB == null) return -1;\n      return dateA.compareTo(dateB);\n    });\n    return instruments;\n  }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":861,"line":30,"column":29},"end":{"offset":1122,"line":37,"column":6},"text":"{\n      DateTime? dateA = a.lastMaintenanceDate;\n      DateTime? dateB = b.lastMaintenanceDate;\n      if (dateA == null && dateB == null) return 0;\n      if (dateA == null) return 1;\n      if (dateB == null) return -1;\n      return dateA.compareTo(dateB);\n    }"}}]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This getter has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":10,"unitType":"lines","level":"none","comment":"This getter has 10 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":770,"line":29,"column":0},"end":{"offset":770,"line":29,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":833,"line":30,"column":0},"end":{"offset":833,"line":30,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":863,"line":31,"column":0},"end":{"offset":863,"line":31,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":910,"line":32,"column":0},"end":{"offset":910,"line":32,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":957,"line":33,"column":0},"end":{"offset":957,"line":33,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1009,"line":34,"column":0},"end":{"offset":1009,"line":34,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1044,"line":35,"column":0},"end":{"offset":1044,"line":35,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1080,"line":36,"column":0},"end":{"offset":1080,"line":36,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1117,"line":37,"column":0},"end":{"offset":1117,"line":37,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1125,"line":38,"column":0},"end":{"offset":1125,"line":38,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":61,"level":"none","comment":"This getter has 61 maintainability index.","context":[]}]},"DashboardScreen.build":{"codeSpan":{"start":{"offset":1168,"line":42,"column":3},"end":{"offset":4909,"line":139,"column":4},"text":"Widget build(BuildContext context) {\n    final ownerCounts = getOwnerInstrumentCount();\n    final sortedMaintenance = sortedByOldMaintenance;\n\n    return Scaffold(\n      appBar: AppBar(title: Text('ホームダッシュボード')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        padding: EdgeInsets.all(16),\n        child: Container(\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // 全体概要\n              Container(\n                width: double.infinity,\n                padding: EdgeInsets.all(16),\n                decoration: BoxDecoration(\n                  color: Colors.blue[100],\n                  borderRadius: BorderRadius.circular(8),\n                ),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      '全体の楽器状況概要',\n                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n                    ),\n                    SizedBox(height: 8),\n                    Text('登録楽器数: ${mockInstruments.length}', style: TextStyle(fontSize: 16)),\n                  ],\n                ),\n              ),\n              SizedBox(height: 20),\n              // 所有者別レポート\n              Card(\n                elevation: 4,\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        '所有者別楽器数',\n                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                      ),\n                      SizedBox(height: 8),\n                      Column(\n                        children: ownerCounts.entries.map((entry) {\n                          String fullName = mockUsers.firstWhere(\n                            (user) => user.id == entry.key,\n                            orElse: () => User(id: entry.key, firstName: entry.key, lastName: '', email: '', role: ''),\n                          ).fullName;\n                          return ListTile(\n                            title: Text(fullName),\n                            trailing: Text('${entry.value} 台'),\n                          );\n                        }).toList(),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              SizedBox(height: 20),\n              // メンテナンスが古い楽器一覧レポート\n              Card(\n                elevation: 4,\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        'メンテナンスが古い楽器一覧',\n                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                      ),\n                      SizedBox(height: 8),\n                      Column(\n                        children: sortedMaintenance.map((instrument) {\n                          return ListTile(\n                            title: Text(instrument.model),\n                            subtitle: Text('最終メンテナンス: ' +\n                                (instrument.lastMaintenanceDate != null\n                                    ? instrument.lastMaintenanceDate!.toLocal().toString().split(\" \")[0]\n                                    : \"記録なし\")),\n                          );\n                        }).toList(),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":2,"level":"none","comment":"This method has a cyclomatic complexity of 2.","context":[{"message":"Conditional expression increases complexity","codeSpan":{"start":{"offset":4488,"line":124,"column":34},"end":{"offset":4676,"line":126,"column":45},"text":"instrument.lastMaintenanceDate != null\n                                    ? instrument.lastMaintenanceDate!.toLocal().toString().split(\" \")[0]\n                                    : \"記録なし\""}}]},{"metricsId":"halstead-volume","value":1491.9750303934175,"level":"none","comment":"This method has a halstead volume of 1491.9750303934175.","context":[]},{"metricsId":"lines-of-code","value":99,"unitType":"lines","level":"none","comment":"This method has 99 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":2,"level":"none","comment":"This method has a nesting level of 2.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":1203,"line":42,"column":38},"end":{"offset":4909,"line":139,"column":4},"text":"{\n    final ownerCounts = getOwnerInstrumentCount();\n    final sortedMaintenance = sortedByOldMaintenance;\n\n    return Scaffold(\n      appBar: AppBar(title: Text('ホームダッシュボード')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        padding: EdgeInsets.all(16),\n        child: Container(\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // 全体概要\n              Container(\n                width: double.infinity,\n                padding: EdgeInsets.all(16),\n                decoration: BoxDecoration(\n                  color: Colors.blue[100],\n                  borderRadius: BorderRadius.circular(8),\n                ),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      '全体の楽器状況概要',\n                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n                    ),\n                    SizedBox(height: 8),\n                    Text('登録楽器数: ${mockInstruments.length}', style: TextStyle(fontSize: 16)),\n                  ],\n                ),\n              ),\n              SizedBox(height: 20),\n              // 所有者別レポート\n              Card(\n                elevation: 4,\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        '所有者別楽器数',\n                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                      ),\n                      SizedBox(height: 8),\n                      Column(\n                        children: ownerCounts.entries.map((entry) {\n                          String fullName = mockUsers.firstWhere(\n                            (user) => user.id == entry.key,\n                            orElse: () => User(id: entry.key, firstName: entry.key, lastName: '', email: '', role: ''),\n                          ).fullName;\n                          return ListTile(\n                            title: Text(fullName),\n                            trailing: Text('${entry.value} 台'),\n                          );\n                        }).toList(),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              SizedBox(height: 20),\n              // メンテナンスが古い楽器一覧レポート\n              Card(\n                elevation: 4,\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      Text(\n                        'メンテナンスが古い楽器一覧',\n                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                      ),\n                      SizedBox(height: 8),\n                      Column(\n                        children: sortedMaintenance.map((instrument) {\n                          return ListTile(\n                            title: Text(instrument.model),\n                            subtitle: Text('最終メンテナンス: ' +\n                                (instrument.lastMaintenanceDate != null\n                                    ? instrument.lastMaintenanceDate!.toLocal().toString().split(\" \")[0]\n                                    : \"記録なし\")),\n                          );\n                        }).toList(),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":3026,"line":90,"column":67},"end":{"offset":3524,"line":99,"column":26},"text":"{\n                          String fullName = mockUsers.firstWhere(\n                            (user) => user.id == entry.key,\n                            orElse: () => User(id: entry.key, firstName: entry.key, lastName: '', email: '', role: ''),\n                          ).fullName;\n                          return ListTile(\n                            title: Text(fullName),\n                            trailing: Text('${entry.value} 台'),\n                          );\n                        }"}}]},{"metricsId":"number-of-parameters","value":1,"level":"none","comment":"This method has 1 parameter.","context":[]},{"metricsId":"source-lines-of-code","value":92,"unitType":"lines","level":"none","comment":"This method has 92 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":1205,"line":43,"column":0},"end":{"offset":1205,"line":43,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1256,"line":44,"column":0},"end":{"offset":1256,"line":44,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1311,"line":46,"column":0},"end":{"offset":1311,"line":46,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1332,"line":47,"column":0},"end":{"offset":1332,"line":47,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1381,"line":48,"column":0},"end":{"offset":1381,"line":48,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1408,"line":49,"column":0},"end":{"offset":1408,"line":49,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1443,"line":50,"column":0},"end":{"offset":1443,"line":50,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1480,"line":51,"column":0},"end":{"offset":1480,"line":51,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1506,"line":52,"column":0},"end":{"offset":1506,"line":52,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1531,"line":53,"column":0},"end":{"offset":1531,"line":53,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1589,"line":54,"column":0},"end":{"offset":1589,"line":54,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1635,"line":56,"column":0},"end":{"offset":1635,"line":56,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1660,"line":57,"column":0},"end":{"offset":1660,"line":57,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1700,"line":58,"column":0},"end":{"offset":1700,"line":58,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1745,"line":59,"column":0},"end":{"offset":1745,"line":59,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1788,"line":60,"column":0},"end":{"offset":1788,"line":60,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1831,"line":61,"column":0},"end":{"offset":1831,"line":61,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1889,"line":62,"column":0},"end":{"offset":1889,"line":62,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1908,"line":63,"column":0},"end":{"offset":1908,"line":63,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1939,"line":64,"column":0},"end":{"offset":1939,"line":64,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2003,"line":65,"column":0},"end":{"offset":2003,"line":65,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2033,"line":66,"column":0},"end":{"offset":2033,"line":66,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2059,"line":67,"column":0},"end":{"offset":2059,"line":67,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2094,"line":68,"column":0},"end":{"offset":2094,"line":68,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2177,"line":69,"column":0},"end":{"offset":2177,"line":69,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2200,"line":70,"column":0},"end":{"offset":2200,"line":70,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2241,"line":71,"column":0},"end":{"offset":2241,"line":71,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2335,"line":72,"column":0},"end":{"offset":2335,"line":72,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2356,"line":73,"column":0},"end":{"offset":2356,"line":73,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2375,"line":74,"column":0},"end":{"offset":2375,"line":74,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2392,"line":75,"column":0},"end":{"offset":2392,"line":75,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2454,"line":77,"column":0},"end":{"offset":2454,"line":77,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2474,"line":78,"column":0},"end":{"offset":2474,"line":78,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2504,"line":79,"column":0},"end":{"offset":2504,"line":79,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2536,"line":80,"column":0},"end":{"offset":2536,"line":80,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2583,"line":81,"column":0},"end":{"offset":2583,"line":81,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2616,"line":82,"column":0},"end":{"offset":2616,"line":82,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2682,"line":83,"column":0},"end":{"offset":2682,"line":83,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2714,"line":84,"column":0},"end":{"offset":2714,"line":84,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2742,"line":85,"column":0},"end":{"offset":2742,"line":85,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2777,"line":86,"column":0},"end":{"offset":2777,"line":86,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2862,"line":87,"column":0},"end":{"offset":2862,"line":87,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2887,"line":88,"column":0},"end":{"offset":2887,"line":88,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2930,"line":89,"column":0},"end":{"offset":2930,"line":89,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2960,"line":90,"column":0},"end":{"offset":2960,"line":90,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3028,"line":91,"column":0},"end":{"offset":3028,"line":91,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3094,"line":92,"column":0},"end":{"offset":3094,"line":92,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3154,"line":93,"column":0},"end":{"offset":3154,"line":93,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3274,"line":94,"column":0},"end":{"offset":3274,"line":94,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3312,"line":95,"column":0},"end":{"offset":3312,"line":95,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3355,"line":96,"column":0},"end":{"offset":3355,"line":96,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3406,"line":97,"column":0},"end":{"offset":3406,"line":97,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3470,"line":98,"column":0},"end":{"offset":3470,"line":98,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3499,"line":99,"column":0},"end":{"offset":3499,"line":99,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3536,"line":100,"column":0},"end":{"offset":3536,"line":100,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3561,"line":101,"column":0},"end":{"offset":3561,"line":101,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3584,"line":102,"column":0},"end":{"offset":3584,"line":102,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3605,"line":103,"column":0},"end":{"offset":3605,"line":103,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3624,"line":104,"column":0},"end":{"offset":3624,"line":104,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3641,"line":105,"column":0},"end":{"offset":3641,"line":105,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3712,"line":107,"column":0},"end":{"offset":3712,"line":107,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3732,"line":108,"column":0},"end":{"offset":3732,"line":108,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3762,"line":109,"column":0},"end":{"offset":3762,"line":109,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3794,"line":110,"column":0},"end":{"offset":3794,"line":110,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3841,"line":111,"column":0},"end":{"offset":3841,"line":111,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3874,"line":112,"column":0},"end":{"offset":3874,"line":112,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3940,"line":113,"column":0},"end":{"offset":3940,"line":113,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3972,"line":114,"column":0},"end":{"offset":3972,"line":114,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4000,"line":115,"column":0},"end":{"offset":4000,"line":115,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4041,"line":116,"column":0},"end":{"offset":4041,"line":116,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4126,"line":117,"column":0},"end":{"offset":4126,"line":117,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4151,"line":118,"column":0},"end":{"offset":4151,"line":118,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4194,"line":119,"column":0},"end":{"offset":4194,"line":119,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4224,"line":120,"column":0},"end":{"offset":4224,"line":120,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4295,"line":121,"column":0},"end":{"offset":4295,"line":121,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4338,"line":122,"column":0},"end":{"offset":4338,"line":122,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4397,"line":123,"column":0},"end":{"offset":4397,"line":123,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4455,"line":124,"column":0},"end":{"offset":4455,"line":124,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4527,"line":125,"column":0},"end":{"offset":4527,"line":125,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4632,"line":126,"column":0},"end":{"offset":4632,"line":126,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4680,"line":127,"column":0},"end":{"offset":4680,"line":127,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4709,"line":128,"column":0},"end":{"offset":4709,"line":128,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4746,"line":129,"column":0},"end":{"offset":4746,"line":129,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4771,"line":130,"column":0},"end":{"offset":4771,"line":130,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4794,"line":131,"column":0},"end":{"offset":4794,"line":131,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4815,"line":132,"column":0},"end":{"offset":4815,"line":132,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4834,"line":133,"column":0},"end":{"offset":4834,"line":133,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4851,"line":134,"column":0},"end":{"offset":4851,"line":134,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4866,"line":135,"column":0},"end":{"offset":4866,"line":135,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4879,"line":136,"column":0},"end":{"offset":4879,"line":136,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4890,"line":137,"column":0},"end":{"offset":4890,"line":137,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4899,"line":138,"column":0},"end":{"offset":4899,"line":138,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":35,"level":"none","comment":"This method has 35 maintainability index.","context":[]}]}},"issues":[],"antiPatternCases":[]},{"path":"lib/screens/instrument_list_screen.dart","fileMetrics":[{"metricsId":"technical-debt","value":0.0,"level":"none","comment":"This compilation unit has 0.0 swe hours of debt.","context":[]}],"classes":{"InstrumentListScreen":{"codeSpan":{"start":{"offset":182,"line":7,"column":1},"end":{"offset":2599,"line":77,"column":2},"text":"class InstrumentListScreen extends StatelessWidget {\n  final List<Instrument> mockInstruments;\n  final List<User> mockUsers;\n\n  const InstrumentListScreen({\n    Key? key,\n    required this.mockInstruments,\n    required this.mockUsers,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('楽器一覧')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: DataTable(\n          columns: [\n            DataColumn(label: Text('名称')),\n            DataColumn(label: Text('所有者')),\n            DataColumn(label: Text('所持数')),\n            DataColumn(label: Text('保管場所')),\n            DataColumn(label: Text('購入日')),\n            DataColumn(label: Text('損耗度')),\n          ],\n          rows: mockInstruments.map((inst) {\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) => InstrumentEditScreen(instrument: inst, mockUsers: mockUsers),\n                        ),\n                      );\n                    },\n                    child: Text(\n                      inst.model,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(\n                  Text(inst.ownerIds\n                      .map((id) {\n                        final user = mockUsers.firstWhere(\n                          (u) => u.id == id,\n                          orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                        );\n                        return user.fullName;\n                      })\n                      .join(', ')),\n                ),\n                DataCell(Text(inst.quantity.toString())),\n                DataCell(Text(inst.storageLocation)),\n                DataCell(Text(inst.purchaseDate.toLocal().toString().split(\" \")[0])),\n                DataCell(Text('${(inst.wearDegree * 100).toStringAsFixed(0)}%')),\n              ],\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }\n}"},"metrics":[{"metricsId":"number-of-methods","value":2,"unitType":"methods","level":"none","comment":"This class has 2 methods.","context":[{"message":"constructor InstrumentListScreen increase metric value","codeSpan":{"start":{"offset":310,"line":11,"column":3},"end":{"offset":440,"line":15,"column":24},"text":"const InstrumentListScreen({\n    Key? key,\n    required this.mockInstruments,\n    required this.mockUsers,\n  }) : super(key: key);"}},{"message":"method build increase metric value","codeSpan":{"start":{"offset":456,"line":18,"column":3},"end":{"offset":2597,"line":76,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('楽器一覧')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: DataTable(\n          columns: [\n            DataColumn(label: Text('名称')),\n            DataColumn(label: Text('所有者')),\n            DataColumn(label: Text('所持数')),\n            DataColumn(label: Text('保管場所')),\n            DataColumn(label: Text('購入日')),\n            DataColumn(label: Text('損耗度')),\n          ],\n          rows: mockInstruments.map((inst) {\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) => InstrumentEditScreen(instrument: inst, mockUsers: mockUsers),\n                        ),\n                      );\n                    },\n                    child: Text(\n                      inst.model,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(\n                  Text(inst.ownerIds\n                      .map((id) {\n                        final user = mockUsers.firstWhere(\n                          (u) => u.id == id,\n                          orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                        );\n                        return user.fullName;\n                      })\n                      .join(', ')),\n                ),\n                DataCell(Text(inst.quantity.toString())),\n                DataCell(Text(inst.storageLocation)),\n                DataCell(Text(inst.purchaseDate.toLocal().toString().split(\" \")[0])),\n                DataCell(Text('${(inst.wearDegree * 100).toStringAsFixed(0)}%')),\n              ],\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }"}}]},{"metricsId":"weight-of-class","value":0.5,"level":"none","comment":"This class has a weight of 0.5.","context":[{"message":"public constructor InstrumentListScreen decrease metric value","codeSpan":{"start":{"offset":310,"line":11,"column":3},"end":{"offset":440,"line":15,"column":24},"text":"const InstrumentListScreen({\n    Key? key,\n    required this.mockInstruments,\n    required this.mockUsers,\n  }) : super(key: key);"}},{"message":"functional method build increase metric value","codeSpan":{"start":{"offset":456,"line":18,"column":3},"end":{"offset":2597,"line":76,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('楽器一覧')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: DataTable(\n          columns: [\n            DataColumn(label: Text('名称')),\n            DataColumn(label: Text('所有者')),\n            DataColumn(label: Text('所持数')),\n            DataColumn(label: Text('保管場所')),\n            DataColumn(label: Text('購入日')),\n            DataColumn(label: Text('損耗度')),\n          ],\n          rows: mockInstruments.map((inst) {\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) => InstrumentEditScreen(instrument: inst, mockUsers: mockUsers),\n                        ),\n                      );\n                    },\n                    child: Text(\n                      inst.model,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(\n                  Text(inst.ownerIds\n                      .map((id) {\n                        final user = mockUsers.firstWhere(\n                          (u) => u.id == id,\n                          orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                        );\n                        return user.fullName;\n                      })\n                      .join(', ')),\n                ),\n                DataCell(Text(inst.quantity.toString())),\n                DataCell(Text(inst.storageLocation)),\n                DataCell(Text(inst.purchaseDate.toLocal().toString().split(\" \")[0])),\n                DataCell(Text('${(inst.wearDegree * 100).toStringAsFixed(0)}%')),\n              ],\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }"}}]}]}},"functions":{"InstrumentListScreen.InstrumentListScreen":{"codeSpan":{"start":{"offset":310,"line":11,"column":3},"end":{"offset":440,"line":15,"column":24},"text":"const InstrumentListScreen({\n    Key? key,\n    required this.mockInstruments,\n    required this.mockUsers,\n  }) : super(key: key);"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This constructor has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":0.0,"level":"none","comment":"This constructor has a halstead volume of 0.0.","context":[]},{"metricsId":"lines-of-code","value":5,"unitType":"lines","level":"none","comment":"This constructor has 5 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":0,"level":"none","comment":"This constructor has a nesting level of 0.","context":[]},{"metricsId":"source-lines-of-code","value":0,"unitType":"lines","level":"none","comment":"This constructor has 0 source lines of code.","context":[]},{"metricsId":"maintainability-index","value":100,"level":"none","comment":"This constructor has 100 maintainability index.","context":[]}]},"InstrumentListScreen.build":{"codeSpan":{"start":{"offset":456,"line":18,"column":3},"end":{"offset":2597,"line":76,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('楽器一覧')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: DataTable(\n          columns: [\n            DataColumn(label: Text('名称')),\n            DataColumn(label: Text('所有者')),\n            DataColumn(label: Text('所持数')),\n            DataColumn(label: Text('保管場所')),\n            DataColumn(label: Text('購入日')),\n            DataColumn(label: Text('損耗度')),\n          ],\n          rows: mockInstruments.map((inst) {\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) => InstrumentEditScreen(instrument: inst, mockUsers: mockUsers),\n                        ),\n                      );\n                    },\n                    child: Text(\n                      inst.model,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(\n                  Text(inst.ownerIds\n                      .map((id) {\n                        final user = mockUsers.firstWhere(\n                          (u) => u.id == id,\n                          orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                        );\n                        return user.fullName;\n                      })\n                      .join(', ')),\n                ),\n                DataCell(Text(inst.quantity.toString())),\n                DataCell(Text(inst.storageLocation)),\n                DataCell(Text(inst.purchaseDate.toLocal().toString().split(\" \")[0])),\n                DataCell(Text('${(inst.wearDegree * 100).toStringAsFixed(0)}%')),\n              ],\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":1460.9910819000816,"level":"none","comment":"This method has a halstead volume of 1460.9910819000816.","context":[]},{"metricsId":"lines-of-code","value":60,"unitType":"lines","level":"none","comment":"This method has 60 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":3,"level":"none","comment":"This method has a nesting level of 3.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":491,"line":18,"column":38},"end":{"offset":2597,"line":76,"column":4},"text":"{\n    return Scaffold(\n      appBar: AppBar(title: Text('楽器一覧')),\n      drawer: AppDrawer(),\n      body: SingleChildScrollView(\n        scrollDirection: Axis.horizontal,\n        child: DataTable(\n          columns: [\n            DataColumn(label: Text('名称')),\n            DataColumn(label: Text('所有者')),\n            DataColumn(label: Text('所持数')),\n            DataColumn(label: Text('保管場所')),\n            DataColumn(label: Text('購入日')),\n            DataColumn(label: Text('損耗度')),\n          ],\n          rows: mockInstruments.map((inst) {\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) => InstrumentEditScreen(instrument: inst, mockUsers: mockUsers),\n                        ),\n                      );\n                    },\n                    child: Text(\n                      inst.model,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(\n                  Text(inst.ownerIds\n                      .map((id) {\n                        final user = mockUsers.firstWhere(\n                          (u) => u.id == id,\n                          orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                        );\n                        return user.fullName;\n                      })\n                      .join(', ')),\n                ),\n                DataCell(Text(inst.quantity.toString())),\n                DataCell(Text(inst.storageLocation)),\n                DataCell(Text(inst.purchaseDate.toLocal().toString().split(\" \")[0])),\n                DataCell(Text('${(inst.wearDegree * 100).toStringAsFixed(0)}%')),\n              ],\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":1028,"line":33,"column":44},"end":{"offset":2555,"line":72,"column":12},"text":"{\n            return DataRow(\n              cells: [\n                DataCell(\n                  GestureDetector(\n                    onTap: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) => InstrumentEditScreen(instrument: inst, mockUsers: mockUsers),\n                        ),\n                      );\n                    },\n                    child: Text(\n                      inst.model,\n                      style: TextStyle(\n                        color: Colors.blue,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n                DataCell(\n                  Text(inst.ownerIds\n                      .map((id) {\n                        final user = mockUsers.firstWhere(\n                          (u) => u.id == id,\n                          orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                        );\n                        return user.fullName;\n                      })\n                      .join(', ')),\n                ),\n                DataCell(Text(inst.quantity.toString())),\n                DataCell(Text(inst.storageLocation)),\n                DataCell(Text(inst.purchaseDate.toLocal().toString().split(\" \")[0])),\n                DataCell(Text('${(inst.wearDegree * 100).toStringAsFixed(0)}%')),\n              ],\n            );\n          }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":1172,"line":38,"column":31},"end":{"offset":1471,"line":45,"column":22},"text":"{\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) => InstrumentEditScreen(instrument: inst, mockUsers: mockUsers),\n                        ),\n                      );\n                    }"}}]},{"metricsId":"number-of-parameters","value":1,"level":"none","comment":"This method has 1 parameter.","context":[]},{"metricsId":"source-lines-of-code","value":57,"unitType":"lines","level":"none","comment":"This method has 57 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":493,"line":19,"column":0},"end":{"offset":493,"line":19,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":514,"line":20,"column":0},"end":{"offset":514,"line":20,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":557,"line":21,"column":0},"end":{"offset":557,"line":21,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":584,"line":22,"column":0},"end":{"offset":584,"line":22,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":619,"line":23,"column":0},"end":{"offset":619,"line":23,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":661,"line":24,"column":0},"end":{"offset":661,"line":24,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":687,"line":25,"column":0},"end":{"offset":687,"line":25,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":708,"line":26,"column":0},"end":{"offset":708,"line":26,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":751,"line":27,"column":0},"end":{"offset":751,"line":27,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":795,"line":28,"column":0},"end":{"offset":795,"line":28,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":839,"line":29,"column":0},"end":{"offset":839,"line":29,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":884,"line":30,"column":0},"end":{"offset":884,"line":30,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":928,"line":31,"column":0},"end":{"offset":928,"line":31,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":972,"line":32,"column":0},"end":{"offset":972,"line":32,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":985,"line":33,"column":0},"end":{"offset":985,"line":33,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1030,"line":34,"column":0},"end":{"offset":1030,"line":34,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1058,"line":35,"column":0},"end":{"offset":1058,"line":35,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1081,"line":36,"column":0},"end":{"offset":1081,"line":36,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1107,"line":37,"column":0},"end":{"offset":1107,"line":37,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1142,"line":38,"column":0},"end":{"offset":1142,"line":38,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1174,"line":39,"column":0},"end":{"offset":1174,"line":39,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1212,"line":40,"column":0},"end":{"offset":1212,"line":40,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1245,"line":41,"column":0},"end":{"offset":1245,"line":41,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1288,"line":42,"column":0},"end":{"offset":1288,"line":42,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1398,"line":43,"column":0},"end":{"offset":1398,"line":43,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1425,"line":44,"column":0},"end":{"offset":1425,"line":44,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1450,"line":45,"column":0},"end":{"offset":1450,"line":45,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1473,"line":46,"column":0},"end":{"offset":1473,"line":46,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1506,"line":47,"column":0},"end":{"offset":1506,"line":47,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1540,"line":48,"column":0},"end":{"offset":1540,"line":48,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1580,"line":49,"column":0},"end":{"offset":1580,"line":49,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1624,"line":50,"column":0},"end":{"offset":1624,"line":50,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1686,"line":51,"column":0},"end":{"offset":1686,"line":51,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1711,"line":52,"column":0},"end":{"offset":1711,"line":52,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1734,"line":53,"column":0},"end":{"offset":1734,"line":53,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1755,"line":54,"column":0},"end":{"offset":1755,"line":54,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1774,"line":55,"column":0},"end":{"offset":1774,"line":55,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1800,"line":56,"column":0},"end":{"offset":1800,"line":56,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1837,"line":57,"column":0},"end":{"offset":1837,"line":57,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1871,"line":58,"column":0},"end":{"offset":1871,"line":58,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1930,"line":59,"column":0},"end":{"offset":1930,"line":59,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1975,"line":60,"column":0},"end":{"offset":1975,"line":60,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2079,"line":61,"column":0},"end":{"offset":2079,"line":61,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2106,"line":62,"column":0},"end":{"offset":2106,"line":62,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2152,"line":63,"column":0},"end":{"offset":2152,"line":63,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2177,"line":64,"column":0},"end":{"offset":2177,"line":64,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2213,"line":65,"column":0},"end":{"offset":2213,"line":65,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2232,"line":66,"column":0},"end":{"offset":2232,"line":66,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2290,"line":67,"column":0},"end":{"offset":2290,"line":67,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2344,"line":68,"column":0},"end":{"offset":2344,"line":68,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2430,"line":69,"column":0},"end":{"offset":2430,"line":69,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2512,"line":70,"column":0},"end":{"offset":2512,"line":70,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2529,"line":71,"column":0},"end":{"offset":2529,"line":71,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2544,"line":72,"column":0},"end":{"offset":2544,"line":72,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2567,"line":73,"column":0},"end":{"offset":2567,"line":73,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2578,"line":74,"column":0},"end":{"offset":2578,"line":74,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2587,"line":75,"column":0},"end":{"offset":2587,"line":75,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":40,"level":"none","comment":"This method has 40 maintainability index.","context":[]}]}},"issues":[],"antiPatternCases":[]},{"path":"lib/screens/user_edit_screen.dart","fileMetrics":[{"metricsId":"technical-debt","value":0.0,"level":"none","comment":"This compilation unit has 0.0 swe hours of debt.","context":[]}],"classes":{"UserEditScreen":{"codeSpan":{"start":{"offset":71,"line":4,"column":1},"end":{"offset":289,"line":11,"column":2},"text":"class UserEditScreen extends StatefulWidget {\n  final User user;\n\n  const UserEditScreen({Key? key, required this.user}) : super(key: key);\n\n  @override\n  _UserEditScreenState createState() => _UserEditScreenState();\n}"},"metrics":[{"metricsId":"number-of-methods","value":2,"unitType":"methods","level":"none","comment":"This class has 2 methods.","context":[{"message":"constructor UserEditScreen increase metric value","codeSpan":{"start":{"offset":139,"line":7,"column":3},"end":{"offset":210,"line":7,"column":74},"text":"const UserEditScreen({Key? key, required this.user}) : super(key: key);"}},{"message":"method createState increase metric value","codeSpan":{"start":{"offset":226,"line":10,"column":3},"end":{"offset":287,"line":10,"column":64},"text":"_UserEditScreenState createState() => _UserEditScreenState();"}}]},{"metricsId":"weight-of-class","value":0.5,"level":"none","comment":"This class has a weight of 0.5.","context":[{"message":"public constructor UserEditScreen decrease metric value","codeSpan":{"start":{"offset":139,"line":7,"column":3},"end":{"offset":210,"line":7,"column":74},"text":"const UserEditScreen({Key? key, required this.user}) : super(key: key);"}},{"message":"functional method createState increase metric value","codeSpan":{"start":{"offset":226,"line":10,"column":3},"end":{"offset":287,"line":10,"column":64},"text":"_UserEditScreenState createState() => _UserEditScreenState();"}}]}]},"_UserEditScreenState":{"codeSpan":{"start":{"offset":291,"line":13,"column":1},"end":{"offset":3791,"line":113,"column":2},"text":"class _UserEditScreenState extends State<UserEditScreen> {\n  final _formKey = GlobalKey<FormState>();\n  late TextEditingController firstNameController;\n  late TextEditingController lastNameController;\n  late TextEditingController emailController;\n  late TextEditingController roleController;\n\n  @override\n  void initState() {\n    super.initState();\n    firstNameController = TextEditingController(text: widget.user.firstName);\n    lastNameController = TextEditingController(text: widget.user.lastName);\n    emailController = TextEditingController(text: widget.user.email);\n    roleController = TextEditingController(text: widget.user.role);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('ユーザー編集')),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // 2列レイアウトで「名」と「姓」\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: firstNameController,\n                      decoration: InputDecoration(\n                        labelText: '名',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: TextFormField(\n                      controller: lastNameController,\n                      decoration: InputDecoration(\n                        labelText: '姓',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              TextFormField(\n                controller: emailController,\n                decoration: InputDecoration(\n                  labelText: 'メールアドレス',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              TextFormField(\n                controller: roleController,\n                decoration: InputDecoration(\n                  labelText: '担当',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              Align(\n                alignment: Alignment.topRight,\n                child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.blue[800],\n                    foregroundColor: Colors.white,\n                  ),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                  child: Text('保存'),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    firstNameController.dispose();\n    lastNameController.dispose();\n    emailController.dispose();\n    roleController.dispose();\n    super.dispose();\n  }\n}"},"metrics":[{"metricsId":"number-of-methods","value":3,"unitType":"methods","level":"none","comment":"This class has 3 methods.","context":[{"message":"method initState increase metric value","codeSpan":{"start":{"offset":598,"line":21,"column":3},"end":{"offset":935,"line":27,"column":4},"text":"void initState() {\n    super.initState();\n    firstNameController = TextEditingController(text: widget.user.firstName);\n    lastNameController = TextEditingController(text: widget.user.lastName);\n    emailController = TextEditingController(text: widget.user.email);\n    roleController = TextEditingController(text: widget.user.role);\n  }"}},{"message":"method build increase metric value","codeSpan":{"start":{"offset":951,"line":30,"column":3},"end":{"offset":3602,"line":103,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('ユーザー編集')),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // 2列レイアウトで「名」と「姓」\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: firstNameController,\n                      decoration: InputDecoration(\n                        labelText: '名',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: TextFormField(\n                      controller: lastNameController,\n                      decoration: InputDecoration(\n                        labelText: '姓',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              TextFormField(\n                controller: emailController,\n                decoration: InputDecoration(\n                  labelText: 'メールアドレス',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              TextFormField(\n                controller: roleController,\n                decoration: InputDecoration(\n                  labelText: '担当',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              Align(\n                alignment: Alignment.topRight,\n                child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.blue[800],\n                    foregroundColor: Colors.white,\n                  ),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                  child: Text('保存'),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"}},{"message":"method dispose increase metric value","codeSpan":{"start":{"offset":3618,"line":106,"column":3},"end":{"offset":3789,"line":112,"column":4},"text":"void dispose() {\n    firstNameController.dispose();\n    lastNameController.dispose();\n    emailController.dispose();\n    roleController.dispose();\n    super.dispose();\n  }"}}]},{"metricsId":"weight-of-class","value":1.0,"level":"none","comment":"This class has a weight of 1.0.","context":[{"message":"functional method initState increase metric value","codeSpan":{"start":{"offset":598,"line":21,"column":3},"end":{"offset":935,"line":27,"column":4},"text":"void initState() {\n    super.initState();\n    firstNameController = TextEditingController(text: widget.user.firstName);\n    lastNameController = TextEditingController(text: widget.user.lastName);\n    emailController = TextEditingController(text: widget.user.email);\n    roleController = TextEditingController(text: widget.user.role);\n  }"}},{"message":"functional method build increase metric value","codeSpan":{"start":{"offset":951,"line":30,"column":3},"end":{"offset":3602,"line":103,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('ユーザー編集')),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // 2列レイアウトで「名」と「姓」\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: firstNameController,\n                      decoration: InputDecoration(\n                        labelText: '名',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: TextFormField(\n                      controller: lastNameController,\n                      decoration: InputDecoration(\n                        labelText: '姓',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              TextFormField(\n                controller: emailController,\n                decoration: InputDecoration(\n                  labelText: 'メールアドレス',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              TextFormField(\n                controller: roleController,\n                decoration: InputDecoration(\n                  labelText: '担当',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              Align(\n                alignment: Alignment.topRight,\n                child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.blue[800],\n                    foregroundColor: Colors.white,\n                  ),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                  child: Text('保存'),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"}},{"message":"functional method dispose increase metric value","codeSpan":{"start":{"offset":3618,"line":106,"column":3},"end":{"offset":3789,"line":112,"column":4},"text":"void dispose() {\n    firstNameController.dispose();\n    lastNameController.dispose();\n    emailController.dispose();\n    roleController.dispose();\n    super.dispose();\n  }"}}]}]}},"functions":{"UserEditScreen.UserEditScreen":{"codeSpan":{"start":{"offset":139,"line":7,"column":3},"end":{"offset":210,"line":7,"column":74},"text":"const UserEditScreen({Key? key, required this.user}) : super(key: key);"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This constructor has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":0.0,"level":"none","comment":"This constructor has a halstead volume of 0.0.","context":[]},{"metricsId":"lines-of-code","value":1,"unitType":"line","level":"none","comment":"This constructor has 1 line of code.","context":[]},{"metricsId":"maximum-nesting-level","value":0,"level":"none","comment":"This constructor has a nesting level of 0.","context":[]},{"metricsId":"source-lines-of-code","value":0,"unitType":"lines","level":"none","comment":"This constructor has 0 source lines of code.","context":[]},{"metricsId":"maintainability-index","value":100,"level":"none","comment":"This constructor has 100 maintainability index.","context":[]}]},"UserEditScreen.createState":{"codeSpan":{"start":{"offset":226,"line":10,"column":3},"end":{"offset":287,"line":10,"column":64},"text":"_UserEditScreenState createState() => _UserEditScreenState();"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":0.0,"level":"none","comment":"This method has a halstead volume of 0.0.","context":[]},{"metricsId":"lines-of-code","value":2,"unitType":"lines","level":"none","comment":"This method has 2 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":0,"level":"none","comment":"This method has a nesting level of 0.","context":[]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This method has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":1,"unitType":"line","level":"none","comment":"This method has 1 source line of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":224,"line":10,"column":0},"end":{"offset":224,"line":10,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":100,"level":"none","comment":"This method has 100 maintainability index.","context":[]}]},"_UserEditScreenState.initState":{"codeSpan":{"start":{"offset":598,"line":21,"column":3},"end":{"offset":935,"line":27,"column":4},"text":"void initState() {\n    super.initState();\n    firstNameController = TextEditingController(text: widget.user.firstName);\n    lastNameController = TextEditingController(text: widget.user.lastName);\n    emailController = TextEditingController(text: widget.user.email);\n    roleController = TextEditingController(text: widget.user.role);\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":110.41329273967051,"level":"none","comment":"This method has a halstead volume of 110.41329273967051.","context":[]},{"metricsId":"lines-of-code","value":8,"unitType":"lines","level":"none","comment":"This method has 8 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":1,"level":"none","comment":"This method has a nesting level of 1.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":615,"line":21,"column":20},"end":{"offset":935,"line":27,"column":4},"text":"{\n    super.initState();\n    firstNameController = TextEditingController(text: widget.user.firstName);\n    lastNameController = TextEditingController(text: widget.user.lastName);\n    emailController = TextEditingController(text: widget.user.email);\n    roleController = TextEditingController(text: widget.user.role);\n  }"}}]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This method has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":5,"unitType":"lines","level":"none","comment":"This method has 5 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":617,"line":22,"column":0},"end":{"offset":617,"line":22,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":640,"line":23,"column":0},"end":{"offset":640,"line":23,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":718,"line":24,"column":0},"end":{"offset":718,"line":24,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":794,"line":25,"column":0},"end":{"offset":794,"line":25,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":864,"line":26,"column":0},"end":{"offset":864,"line":26,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":71,"level":"none","comment":"This method has 71 maintainability index.","context":[]}]},"_UserEditScreenState.build":{"codeSpan":{"start":{"offset":951,"line":30,"column":3},"end":{"offset":3602,"line":103,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('ユーザー編集')),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // 2列レイアウトで「名」と「姓」\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: firstNameController,\n                      decoration: InputDecoration(\n                        labelText: '名',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: TextFormField(\n                      controller: lastNameController,\n                      decoration: InputDecoration(\n                        labelText: '姓',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              TextFormField(\n                controller: emailController,\n                decoration: InputDecoration(\n                  labelText: 'メールアドレス',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              TextFormField(\n                controller: roleController,\n                decoration: InputDecoration(\n                  labelText: '担当',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              Align(\n                alignment: Alignment.topRight,\n                child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.blue[800],\n                    foregroundColor: Colors.white,\n                  ),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                  child: Text('保存'),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":610.0180752293277,"level":"none","comment":"This method has a halstead volume of 610.0180752293277.","context":[]},{"metricsId":"lines-of-code","value":75,"unitType":"lines","level":"none","comment":"This method has 75 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":2,"level":"none","comment":"This method has a nesting level of 2.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":986,"line":30,"column":38},"end":{"offset":3602,"line":103,"column":4},"text":"{\n    return Scaffold(\n      appBar: AppBar(title: Text('ユーザー編集')),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              // 2列レイアウトで「名」と「姓」\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: firstNameController,\n                      decoration: InputDecoration(\n                        labelText: '名',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: TextFormField(\n                      controller: lastNameController,\n                      decoration: InputDecoration(\n                        labelText: '姓',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              TextFormField(\n                controller: emailController,\n                decoration: InputDecoration(\n                  labelText: 'メールアドレス',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              TextFormField(\n                controller: roleController,\n                decoration: InputDecoration(\n                  labelText: '担当',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              Align(\n                alignment: Alignment.topRight,\n                child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.blue[800],\n                    foregroundColor: Colors.white,\n                  ),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                  child: Text('保存'),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":3404,"line":92,"column":33},"end":{"offset":3469,"line":94,"column":20},"text":"{\n                    Navigator.pop(context);\n                  }"}}]},{"metricsId":"number-of-parameters","value":1,"level":"none","comment":"This method has 1 parameter.","context":[]},{"metricsId":"source-lines-of-code","value":71,"unitType":"lines","level":"none","comment":"This method has 71 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":988,"line":31,"column":0},"end":{"offset":988,"line":31,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1009,"line":32,"column":0},"end":{"offset":1009,"line":32,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1054,"line":33,"column":0},"end":{"offset":1054,"line":33,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1072,"line":34,"column":0},"end":{"offset":1072,"line":34,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1095,"line":35,"column":0},"end":{"offset":1095,"line":35,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1133,"line":36,"column":0},"end":{"offset":1133,"line":36,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1172,"line":37,"column":0},"end":{"offset":1172,"line":37,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1197,"line":38,"column":0},"end":{"offset":1197,"line":38,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1255,"line":39,"column":0},"end":{"offset":1255,"line":39,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1312,"line":41,"column":0},"end":{"offset":1312,"line":41,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1331,"line":42,"column":0},"end":{"offset":1331,"line":42,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1359,"line":43,"column":0},"end":{"offset":1359,"line":43,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1387,"line":44,"column":0},"end":{"offset":1387,"line":44,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1429,"line":45,"column":0},"end":{"offset":1429,"line":45,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1484,"line":46,"column":0},"end":{"offset":1484,"line":46,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1535,"line":47,"column":0},"end":{"offset":1535,"line":47,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1575,"line":48,"column":0},"end":{"offset":1575,"line":48,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1652,"line":49,"column":0},"end":{"offset":1652,"line":49,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1729,"line":50,"column":0},"end":{"offset":1729,"line":50,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1754,"line":51,"column":0},"end":{"offset":1754,"line":51,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1777,"line":52,"column":0},"end":{"offset":1777,"line":52,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1798,"line":53,"column":0},"end":{"offset":1798,"line":53,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1837,"line":54,"column":0},"end":{"offset":1837,"line":54,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1865,"line":55,"column":0},"end":{"offset":1865,"line":55,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1907,"line":56,"column":0},"end":{"offset":1907,"line":56,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1961,"line":57,"column":0},"end":{"offset":1961,"line":57,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2012,"line":58,"column":0},"end":{"offset":2012,"line":58,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2052,"line":59,"column":0},"end":{"offset":2052,"line":59,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2129,"line":60,"column":0},"end":{"offset":2129,"line":60,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2206,"line":61,"column":0},"end":{"offset":2206,"line":61,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2231,"line":62,"column":0},"end":{"offset":2231,"line":62,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2254,"line":63,"column":0},"end":{"offset":2254,"line":63,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2275,"line":64,"column":0},"end":{"offset":2275,"line":64,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2294,"line":65,"column":0},"end":{"offset":2294,"line":65,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2311,"line":66,"column":0},"end":{"offset":2311,"line":66,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2347,"line":67,"column":0},"end":{"offset":2347,"line":67,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2376,"line":68,"column":0},"end":{"offset":2376,"line":68,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2421,"line":69,"column":0},"end":{"offset":2421,"line":69,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2466,"line":70,"column":0},"end":{"offset":2466,"line":70,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2506,"line":71,"column":0},"end":{"offset":2506,"line":71,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2577,"line":72,"column":0},"end":{"offset":2577,"line":72,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2648,"line":73,"column":0},"end":{"offset":2648,"line":73,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2667,"line":74,"column":0},"end":{"offset":2667,"line":74,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2684,"line":75,"column":0},"end":{"offset":2684,"line":75,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2720,"line":76,"column":0},"end":{"offset":2720,"line":76,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2749,"line":77,"column":0},"end":{"offset":2749,"line":77,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2793,"line":78,"column":0},"end":{"offset":2793,"line":78,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2838,"line":79,"column":0},"end":{"offset":2838,"line":79,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2873,"line":80,"column":0},"end":{"offset":2873,"line":80,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2944,"line":81,"column":0},"end":{"offset":2944,"line":81,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3015,"line":82,"column":0},"end":{"offset":3015,"line":82,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3034,"line":83,"column":0},"end":{"offset":3034,"line":83,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3051,"line":84,"column":0},"end":{"offset":3051,"line":84,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3087,"line":85,"column":0},"end":{"offset":3087,"line":85,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3108,"line":86,"column":0},"end":{"offset":3108,"line":86,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3155,"line":87,"column":0},"end":{"offset":3155,"line":87,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3194,"line":88,"column":0},"end":{"offset":3194,"line":88,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3245,"line":89,"column":0},"end":{"offset":3245,"line":89,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3300,"line":90,"column":0},"end":{"offset":3300,"line":90,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3351,"line":91,"column":0},"end":{"offset":3351,"line":91,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3372,"line":92,"column":0},"end":{"offset":3372,"line":92,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3406,"line":93,"column":0},"end":{"offset":3406,"line":93,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3450,"line":94,"column":0},"end":{"offset":3450,"line":94,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3471,"line":95,"column":0},"end":{"offset":3471,"line":95,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3508,"line":96,"column":0},"end":{"offset":3508,"line":96,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3527,"line":97,"column":0},"end":{"offset":3527,"line":97,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3544,"line":98,"column":0},"end":{"offset":3544,"line":98,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3559,"line":99,"column":0},"end":{"offset":3559,"line":99,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3572,"line":100,"column":0},"end":{"offset":3572,"line":100,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3583,"line":101,"column":0},"end":{"offset":3583,"line":101,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3592,"line":102,"column":0},"end":{"offset":3592,"line":102,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":40,"level":"none","comment":"This method has 40 maintainability index.","context":[]}]},"_UserEditScreenState.dispose":{"codeSpan":{"start":{"offset":3618,"line":106,"column":3},"end":{"offset":3789,"line":112,"column":4},"text":"void dispose() {\n    firstNameController.dispose();\n    lastNameController.dispose();\n    emailController.dispose();\n    roleController.dispose();\n    super.dispose();\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":20.89735285398626,"level":"none","comment":"This method has a halstead volume of 20.89735285398626.","context":[]},{"metricsId":"lines-of-code","value":8,"unitType":"lines","level":"none","comment":"This method has 8 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":1,"level":"none","comment":"This method has a nesting level of 1.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":3633,"line":106,"column":18},"end":{"offset":3789,"line":112,"column":4},"text":"{\n    firstNameController.dispose();\n    lastNameController.dispose();\n    emailController.dispose();\n    roleController.dispose();\n    super.dispose();\n  }"}}]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This method has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":5,"unitType":"lines","level":"none","comment":"This method has 5 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":3635,"line":107,"column":0},"end":{"offset":3635,"line":107,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3670,"line":108,"column":0},"end":{"offset":3670,"line":108,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3704,"line":109,"column":0},"end":{"offset":3704,"line":109,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3735,"line":110,"column":0},"end":{"offset":3735,"line":110,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3765,"line":111,"column":0},"end":{"offset":3765,"line":111,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":76,"level":"none","comment":"This method has 76 maintainability index.","context":[]}]}},"issues":[],"antiPatternCases":[]},{"path":"lib/screens/instrument_edit_screen.dart","fileMetrics":[{"metricsId":"technical-debt","value":0.0,"level":"none","comment":"This compilation unit has 0.0 swe hours of debt.","context":[]}],"classes":{"InstrumentEditScreen":{"codeSpan":{"start":{"offset":107,"line":5,"column":1},"end":{"offset":439,"line":17,"column":2},"text":"class InstrumentEditScreen extends StatefulWidget {\n  final Instrument instrument;\n  final List<User> mockUsers;\n\n  const InstrumentEditScreen({\n    Key? key,\n    required this.instrument,\n    required this.mockUsers,\n  }) : super(key: key);\n\n  @override\n  _InstrumentEditScreenState createState() => _InstrumentEditScreenState();\n}"},"metrics":[{"metricsId":"number-of-methods","value":2,"unitType":"methods","level":"none","comment":"This class has 2 methods.","context":[{"message":"constructor InstrumentEditScreen increase metric value","codeSpan":{"start":{"offset":223,"line":9,"column":3},"end":{"offset":348,"line":13,"column":24},"text":"const InstrumentEditScreen({\n    Key? key,\n    required this.instrument,\n    required this.mockUsers,\n  }) : super(key: key);"}},{"message":"method createState increase metric value","codeSpan":{"start":{"offset":364,"line":16,"column":3},"end":{"offset":437,"line":16,"column":76},"text":"_InstrumentEditScreenState createState() => _InstrumentEditScreenState();"}}]},{"metricsId":"weight-of-class","value":0.5,"level":"none","comment":"This class has a weight of 0.5.","context":[{"message":"public constructor InstrumentEditScreen decrease metric value","codeSpan":{"start":{"offset":223,"line":9,"column":3},"end":{"offset":348,"line":13,"column":24},"text":"const InstrumentEditScreen({\n    Key? key,\n    required this.instrument,\n    required this.mockUsers,\n  }) : super(key: key);"}},{"message":"functional method createState increase metric value","codeSpan":{"start":{"offset":364,"line":16,"column":3},"end":{"offset":437,"line":16,"column":76},"text":"_InstrumentEditScreenState createState() => _InstrumentEditScreenState();"}}]}]},"_InstrumentEditScreenState":{"codeSpan":{"start":{"offset":441,"line":19,"column":1},"end":{"offset":9233,"line":247,"column":2},"text":"class _InstrumentEditScreenState extends State<InstrumentEditScreen> {\n  final _formKey = GlobalKey<FormState>();\n  late TextEditingController modelController;\n  late TextEditingController quantityController;\n  late TextEditingController storageController;\n  late TextEditingController purchaseDateController;\n  late TextEditingController wearDegreeController;\n  late TextEditingController shortDescriptionController;\n  late TextEditingController descriptionController;\n  late List<String> selectedOwnerIds;\n\n  @override\n  void initState() {\n    super.initState();\n    modelController = TextEditingController(text: widget.instrument.model);\n    quantityController = TextEditingController(text: widget.instrument.quantity.toString());\n    storageController = TextEditingController(text: widget.instrument.storageLocation);\n    purchaseDateController = TextEditingController(\n        text: widget.instrument.purchaseDate.toLocal().toString().split(\" \")[0]);\n    wearDegreeController = TextEditingController(text: (widget.instrument.wearDegree * 100).toString());\n    shortDescriptionController = TextEditingController(text: '');\n    descriptionController = TextEditingController(text: '');\n    selectedOwnerIds = widget.instrument.ownerIds;\n  }\n\n  Future<List<String>?> _showUserSelectionDialog(BuildContext context, List<String> currentSelection) async {\n    List<String> tempSelection = List.from(currentSelection);\n    return showDialog<List<String>>(\n      context: context,\n      builder: (context) {\n        return StatefulBuilder(\n          builder: (context, setState) {\n            return AlertDialog(\n              title: Text(\"所有者を選択\"),\n              content: Container(\n                width: double.maxFinite,\n                child: ListView(\n                  shrinkWrap: true,\n                  children: widget.mockUsers.map((user) {\n                    return CheckboxListTile(\n                      value: tempSelection.contains(user.id),\n                      title: Text(user.fullName),\n                      subtitle: Text(user.email),\n                      onChanged: (bool? value) {\n                        if (value == true && !tempSelection.contains(user.id)) {\n                          tempSelection.add(user.id);\n                        } else if (value == false) {\n                          tempSelection.remove(user.id);\n                        }\n                        setState(() {});\n                      },\n                    );\n                  }).toList(),\n                ),\n              ),\n              actions: [\n                TextButton(\n                  onPressed: () {\n                    Navigator.pop(context, tempSelection);\n                  },\n                  child: Text(\"OK\"),\n                ),\n              ],\n            );\n          },\n        );\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('楽器編集')),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            children: [\n              // フォーム上部右上に配置する保存ボタン\n              Align(\n                alignment: Alignment.topRight,\n                child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.blue[800],\n                    foregroundColor: Colors.white,\n                  ),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                  child: Text('保存'),\n                ),\n              ),\n              SizedBox(height: 16),\n              // Row 1: 「名称」と「所有者」(参照型)\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: modelController,\n                      decoration: InputDecoration(\n                        labelText: '名称',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: GestureDetector(\n                      onTap: () async {\n                        List<String>? result =\n                            await _showUserSelectionDialog(context, selectedOwnerIds);\n                        if (result != null) {\n                          setState(() {\n                            selectedOwnerIds = result;\n                          });\n                        }\n                      },\n                      child: InputDecorator(\n                        decoration: InputDecoration(\n                          labelText: '所有者',\n                          floatingLabelBehavior: FloatingLabelBehavior.always,\n                          contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                          border: OutlineInputBorder(),\n                        ),\n                        child: Text(\n                          selectedOwnerIds.isEmpty\n                              ? ''\n                              : selectedOwnerIds.map((id) {\n                                  final user = widget.mockUsers.firstWhere(\n                                    (u) => u.id == id,\n                                    orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                                  );\n                                  return user.fullName;\n                                }).join(', '),\n                          maxLines: 1,\n                          overflow: TextOverflow.ellipsis,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // Row 2: 保管場所\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: storageController,\n                      decoration: InputDecoration(\n                        labelText: '保管場所',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // Row 3: 「購入日」と「損耗度 (%)」\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: purchaseDateController,\n                      decoration: InputDecoration(\n                        labelText: '購入日',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: TextFormField(\n                      controller: wearDegreeController,\n                      decoration: InputDecoration(\n                        labelText: '損耗度 (%)',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                      keyboardType: TextInputType.number,\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // 簡単な説明（全幅）\n              TextFormField(\n                controller: shortDescriptionController,\n                decoration: InputDecoration(\n                  labelText: '簡単な説明',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              // 説明（複数行）\n              TextFormField(\n                controller: descriptionController,\n                decoration: InputDecoration(\n                  labelText: '説明',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n                maxLines: 3,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    modelController.dispose();\n    quantityController.dispose();\n    storageController.dispose();\n    purchaseDateController.dispose();\n    wearDegreeController.dispose();\n    shortDescriptionController.dispose();\n    descriptionController.dispose();\n    super.dispose();\n  }\n}"},"metrics":[{"metricsId":"number-of-methods","value":4,"unitType":"methods","level":"none","comment":"This class has 4 methods.","context":[{"message":"method initState increase metric value","codeSpan":{"start":{"offset":964,"line":31,"column":3},"end":{"offset":1683,"line":42,"column":4},"text":"void initState() {\n    super.initState();\n    modelController = TextEditingController(text: widget.instrument.model);\n    quantityController = TextEditingController(text: widget.instrument.quantity.toString());\n    storageController = TextEditingController(text: widget.instrument.storageLocation);\n    purchaseDateController = TextEditingController(\n        text: widget.instrument.purchaseDate.toLocal().toString().split(\" \")[0]);\n    wearDegreeController = TextEditingController(text: (widget.instrument.wearDegree * 100).toString());\n    shortDescriptionController = TextEditingController(text: '');\n    descriptionController = TextEditingController(text: '');\n    selectedOwnerIds = widget.instrument.ownerIds;\n  }"}},{"message":"method _showUserSelectionDialog increase metric value","codeSpan":{"start":{"offset":1687,"line":44,"column":3},"end":{"offset":3270,"line":87,"column":4},"text":"Future<List<String>?> _showUserSelectionDialog(BuildContext context, List<String> currentSelection) async {\n    List<String> tempSelection = List.from(currentSelection);\n    return showDialog<List<String>>(\n      context: context,\n      builder: (context) {\n        return StatefulBuilder(\n          builder: (context, setState) {\n            return AlertDialog(\n              title: Text(\"所有者を選択\"),\n              content: Container(\n                width: double.maxFinite,\n                child: ListView(\n                  shrinkWrap: true,\n                  children: widget.mockUsers.map((user) {\n                    return CheckboxListTile(\n                      value: tempSelection.contains(user.id),\n                      title: Text(user.fullName),\n                      subtitle: Text(user.email),\n                      onChanged: (bool? value) {\n                        if (value == true && !tempSelection.contains(user.id)) {\n                          tempSelection.add(user.id);\n                        } else if (value == false) {\n                          tempSelection.remove(user.id);\n                        }\n                        setState(() {});\n                      },\n                    );\n                  }).toList(),\n                ),\n              ),\n              actions: [\n                TextButton(\n                  onPressed: () {\n                    Navigator.pop(context, tempSelection);\n                  },\n                  child: Text(\"OK\"),\n                ),\n              ],\n            );\n          },\n        );\n      },\n    );\n  }"}},{"message":"method build increase metric value","codeSpan":{"start":{"offset":3286,"line":90,"column":3},"end":{"offset":8923,"line":234,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('楽器編集')),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            children: [\n              // フォーム上部右上に配置する保存ボタン\n              Align(\n                alignment: Alignment.topRight,\n                child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.blue[800],\n                    foregroundColor: Colors.white,\n                  ),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                  child: Text('保存'),\n                ),\n              ),\n              SizedBox(height: 16),\n              // Row 1: 「名称」と「所有者」(参照型)\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: modelController,\n                      decoration: InputDecoration(\n                        labelText: '名称',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: GestureDetector(\n                      onTap: () async {\n                        List<String>? result =\n                            await _showUserSelectionDialog(context, selectedOwnerIds);\n                        if (result != null) {\n                          setState(() {\n                            selectedOwnerIds = result;\n                          });\n                        }\n                      },\n                      child: InputDecorator(\n                        decoration: InputDecoration(\n                          labelText: '所有者',\n                          floatingLabelBehavior: FloatingLabelBehavior.always,\n                          contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                          border: OutlineInputBorder(),\n                        ),\n                        child: Text(\n                          selectedOwnerIds.isEmpty\n                              ? ''\n                              : selectedOwnerIds.map((id) {\n                                  final user = widget.mockUsers.firstWhere(\n                                    (u) => u.id == id,\n                                    orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                                  );\n                                  return user.fullName;\n                                }).join(', '),\n                          maxLines: 1,\n                          overflow: TextOverflow.ellipsis,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // Row 2: 保管場所\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: storageController,\n                      decoration: InputDecoration(\n                        labelText: '保管場所',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // Row 3: 「購入日」と「損耗度 (%)」\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: purchaseDateController,\n                      decoration: InputDecoration(\n                        labelText: '購入日',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: TextFormField(\n                      controller: wearDegreeController,\n                      decoration: InputDecoration(\n                        labelText: '損耗度 (%)',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                      keyboardType: TextInputType.number,\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // 簡単な説明（全幅）\n              TextFormField(\n                controller: shortDescriptionController,\n                decoration: InputDecoration(\n                  labelText: '簡単な説明',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              // 説明（複数行）\n              TextFormField(\n                controller: descriptionController,\n                decoration: InputDecoration(\n                  labelText: '説明',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n                maxLines: 3,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"}},{"message":"method dispose increase metric value","codeSpan":{"start":{"offset":8939,"line":237,"column":3},"end":{"offset":9231,"line":246,"column":4},"text":"void dispose() {\n    modelController.dispose();\n    quantityController.dispose();\n    storageController.dispose();\n    purchaseDateController.dispose();\n    wearDegreeController.dispose();\n    shortDescriptionController.dispose();\n    descriptionController.dispose();\n    super.dispose();\n  }"}}]},{"metricsId":"weight-of-class","value":1.0,"level":"none","comment":"This class has a weight of 1.0.","context":[{"message":"functional method initState increase metric value","codeSpan":{"start":{"offset":964,"line":31,"column":3},"end":{"offset":1683,"line":42,"column":4},"text":"void initState() {\n    super.initState();\n    modelController = TextEditingController(text: widget.instrument.model);\n    quantityController = TextEditingController(text: widget.instrument.quantity.toString());\n    storageController = TextEditingController(text: widget.instrument.storageLocation);\n    purchaseDateController = TextEditingController(\n        text: widget.instrument.purchaseDate.toLocal().toString().split(\" \")[0]);\n    wearDegreeController = TextEditingController(text: (widget.instrument.wearDegree * 100).toString());\n    shortDescriptionController = TextEditingController(text: '');\n    descriptionController = TextEditingController(text: '');\n    selectedOwnerIds = widget.instrument.ownerIds;\n  }"}},{"message":"functional method build increase metric value","codeSpan":{"start":{"offset":3286,"line":90,"column":3},"end":{"offset":8923,"line":234,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('楽器編集')),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            children: [\n              // フォーム上部右上に配置する保存ボタン\n              Align(\n                alignment: Alignment.topRight,\n                child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.blue[800],\n                    foregroundColor: Colors.white,\n                  ),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                  child: Text('保存'),\n                ),\n              ),\n              SizedBox(height: 16),\n              // Row 1: 「名称」と「所有者」(参照型)\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: modelController,\n                      decoration: InputDecoration(\n                        labelText: '名称',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: GestureDetector(\n                      onTap: () async {\n                        List<String>? result =\n                            await _showUserSelectionDialog(context, selectedOwnerIds);\n                        if (result != null) {\n                          setState(() {\n                            selectedOwnerIds = result;\n                          });\n                        }\n                      },\n                      child: InputDecorator(\n                        decoration: InputDecoration(\n                          labelText: '所有者',\n                          floatingLabelBehavior: FloatingLabelBehavior.always,\n                          contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                          border: OutlineInputBorder(),\n                        ),\n                        child: Text(\n                          selectedOwnerIds.isEmpty\n                              ? ''\n                              : selectedOwnerIds.map((id) {\n                                  final user = widget.mockUsers.firstWhere(\n                                    (u) => u.id == id,\n                                    orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                                  );\n                                  return user.fullName;\n                                }).join(', '),\n                          maxLines: 1,\n                          overflow: TextOverflow.ellipsis,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // Row 2: 保管場所\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: storageController,\n                      decoration: InputDecoration(\n                        labelText: '保管場所',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // Row 3: 「購入日」と「損耗度 (%)」\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: purchaseDateController,\n                      decoration: InputDecoration(\n                        labelText: '購入日',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: TextFormField(\n                      controller: wearDegreeController,\n                      decoration: InputDecoration(\n                        labelText: '損耗度 (%)',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                      keyboardType: TextInputType.number,\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // 簡単な説明（全幅）\n              TextFormField(\n                controller: shortDescriptionController,\n                decoration: InputDecoration(\n                  labelText: '簡単な説明',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              // 説明（複数行）\n              TextFormField(\n                controller: descriptionController,\n                decoration: InputDecoration(\n                  labelText: '説明',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n                maxLines: 3,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"}},{"message":"functional method dispose increase metric value","codeSpan":{"start":{"offset":8939,"line":237,"column":3},"end":{"offset":9231,"line":246,"column":4},"text":"void dispose() {\n    modelController.dispose();\n    quantityController.dispose();\n    storageController.dispose();\n    purchaseDateController.dispose();\n    wearDegreeController.dispose();\n    shortDescriptionController.dispose();\n    descriptionController.dispose();\n    super.dispose();\n  }"}}]}]}},"functions":{"InstrumentEditScreen.InstrumentEditScreen":{"codeSpan":{"start":{"offset":223,"line":9,"column":3},"end":{"offset":348,"line":13,"column":24},"text":"const InstrumentEditScreen({\n    Key? key,\n    required this.instrument,\n    required this.mockUsers,\n  }) : super(key: key);"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This constructor has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":0.0,"level":"none","comment":"This constructor has a halstead volume of 0.0.","context":[]},{"metricsId":"lines-of-code","value":5,"unitType":"lines","level":"none","comment":"This constructor has 5 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":0,"level":"none","comment":"This constructor has a nesting level of 0.","context":[]},{"metricsId":"source-lines-of-code","value":0,"unitType":"lines","level":"none","comment":"This constructor has 0 source lines of code.","context":[]},{"metricsId":"maintainability-index","value":100,"level":"none","comment":"This constructor has 100 maintainability index.","context":[]}]},"InstrumentEditScreen.createState":{"codeSpan":{"start":{"offset":364,"line":16,"column":3},"end":{"offset":437,"line":16,"column":76},"text":"_InstrumentEditScreenState createState() => _InstrumentEditScreenState();"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":0.0,"level":"none","comment":"This method has a halstead volume of 0.0.","context":[]},{"metricsId":"lines-of-code","value":2,"unitType":"lines","level":"none","comment":"This method has 2 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":0,"level":"none","comment":"This method has a nesting level of 0.","context":[]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This method has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":1,"unitType":"line","level":"none","comment":"This method has 1 source line of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":362,"line":16,"column":0},"end":{"offset":362,"line":16,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":100,"level":"none","comment":"This method has 100 maintainability index.","context":[]}]},"_InstrumentEditScreenState.initState":{"codeSpan":{"start":{"offset":964,"line":31,"column":3},"end":{"offset":1683,"line":42,"column":4},"text":"void initState() {\n    super.initState();\n    modelController = TextEditingController(text: widget.instrument.model);\n    quantityController = TextEditingController(text: widget.instrument.quantity.toString());\n    storageController = TextEditingController(text: widget.instrument.storageLocation);\n    purchaseDateController = TextEditingController(\n        text: widget.instrument.purchaseDate.toLocal().toString().split(\" \")[0]);\n    wearDegreeController = TextEditingController(text: (widget.instrument.wearDegree * 100).toString());\n    shortDescriptionController = TextEditingController(text: '');\n    descriptionController = TextEditingController(text: '');\n    selectedOwnerIds = widget.instrument.ownerIds;\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":252.17293753966362,"level":"none","comment":"This method has a halstead volume of 252.17293753966362.","context":[]},{"metricsId":"lines-of-code","value":13,"unitType":"lines","level":"none","comment":"This method has 13 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":1,"level":"none","comment":"This method has a nesting level of 1.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":981,"line":31,"column":20},"end":{"offset":1683,"line":42,"column":4},"text":"{\n    super.initState();\n    modelController = TextEditingController(text: widget.instrument.model);\n    quantityController = TextEditingController(text: widget.instrument.quantity.toString());\n    storageController = TextEditingController(text: widget.instrument.storageLocation);\n    purchaseDateController = TextEditingController(\n        text: widget.instrument.purchaseDate.toLocal().toString().split(\" \")[0]);\n    wearDegreeController = TextEditingController(text: (widget.instrument.wearDegree * 100).toString());\n    shortDescriptionController = TextEditingController(text: '');\n    descriptionController = TextEditingController(text: '');\n    selectedOwnerIds = widget.instrument.ownerIds;\n  }"}}]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This method has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":10,"unitType":"lines","level":"none","comment":"This method has 10 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":983,"line":32,"column":0},"end":{"offset":983,"line":32,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1006,"line":33,"column":0},"end":{"offset":1006,"line":33,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1082,"line":34,"column":0},"end":{"offset":1082,"line":34,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1175,"line":35,"column":0},"end":{"offset":1175,"line":35,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1263,"line":36,"column":0},"end":{"offset":1263,"line":36,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1315,"line":37,"column":0},"end":{"offset":1315,"line":37,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1397,"line":38,"column":0},"end":{"offset":1397,"line":38,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1502,"line":39,"column":0},"end":{"offset":1502,"line":39,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1568,"line":40,"column":0},"end":{"offset":1568,"line":40,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1629,"line":41,"column":0},"end":{"offset":1629,"line":41,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":62,"level":"none","comment":"This method has 62 maintainability index.","context":[]}]},"_InstrumentEditScreenState._showUserSelectionDialog":{"codeSpan":{"start":{"offset":1687,"line":44,"column":3},"end":{"offset":3270,"line":87,"column":4},"text":"Future<List<String>?> _showUserSelectionDialog(BuildContext context, List<String> currentSelection) async {\n    List<String> tempSelection = List.from(currentSelection);\n    return showDialog<List<String>>(\n      context: context,\n      builder: (context) {\n        return StatefulBuilder(\n          builder: (context, setState) {\n            return AlertDialog(\n              title: Text(\"所有者を選択\"),\n              content: Container(\n                width: double.maxFinite,\n                child: ListView(\n                  shrinkWrap: true,\n                  children: widget.mockUsers.map((user) {\n                    return CheckboxListTile(\n                      value: tempSelection.contains(user.id),\n                      title: Text(user.fullName),\n                      subtitle: Text(user.email),\n                      onChanged: (bool? value) {\n                        if (value == true && !tempSelection.contains(user.id)) {\n                          tempSelection.add(user.id);\n                        } else if (value == false) {\n                          tempSelection.remove(user.id);\n                        }\n                        setState(() {});\n                      },\n                    );\n                  }).toList(),\n                ),\n              ),\n              actions: [\n                TextButton(\n                  onPressed: () {\n                    Navigator.pop(context, tempSelection);\n                  },\n                  child: Text(\"OK\"),\n                ),\n              ],\n            );\n          },\n        );\n      },\n    );\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":4,"level":"none","comment":"This method has a cyclomatic complexity of 4.","context":[{"message":"If statement increases complexity","codeSpan":{"start":{"offset":2569,"line":63,"column":25},"end":{"offset":2815,"line":67,"column":26},"text":"if (value == true && !tempSelection.contains(user.id)) {\n                          tempSelection.add(user.id);\n                        } else if (value == false) {\n                          tempSelection.remove(user.id);\n                        }"}},{"message":"Operator && increases complexity","codeSpan":{"start":{"offset":2587,"line":63,"column":43},"end":{"offset":2589,"line":63,"column":45},"text":"&&"}},{"message":"If statement increases complexity","codeSpan":{"start":{"offset":2711,"line":65,"column":32},"end":{"offset":2815,"line":67,"column":26},"text":"if (value == false) {\n                          tempSelection.remove(user.id);\n                        }"}}]},{"metricsId":"halstead-volume","value":1563.3481645675986,"level":"none","comment":"This method has a halstead volume of 1563.3481645675986.","context":[]},{"metricsId":"lines-of-code","value":44,"unitType":"lines","level":"none","comment":"This method has 44 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":6,"level":"none","comment":"This method has a nesting level of 6.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":1793,"line":44,"column":109},"end":{"offset":3270,"line":87,"column":4},"text":"{\n    List<String> tempSelection = List.from(currentSelection);\n    return showDialog<List<String>>(\n      context: context,\n      builder: (context) {\n        return StatefulBuilder(\n          builder: (context, setState) {\n            return AlertDialog(\n              title: Text(\"所有者を選択\"),\n              content: Container(\n                width: double.maxFinite,\n                child: ListView(\n                  shrinkWrap: true,\n                  children: widget.mockUsers.map((user) {\n                    return CheckboxListTile(\n                      value: tempSelection.contains(user.id),\n                      title: Text(user.fullName),\n                      subtitle: Text(user.email),\n                      onChanged: (bool? value) {\n                        if (value == true && !tempSelection.contains(user.id)) {\n                          tempSelection.add(user.id);\n                        } else if (value == false) {\n                          tempSelection.remove(user.id);\n                        }\n                        setState(() {});\n                      },\n                    );\n                  }).toList(),\n                ),\n              ),\n              actions: [\n                TextButton(\n                  onPressed: () {\n                    Navigator.pop(context, tempSelection);\n                  },\n                  child: Text(\"OK\"),\n                ),\n              ],\n            );\n          },\n        );\n      },\n    );\n  }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":1943,"line":48,"column":26},"end":{"offset":3258,"line":85,"column":8},"text":"{\n        return StatefulBuilder(\n          builder: (context, setState) {\n            return AlertDialog(\n              title: Text(\"所有者を選択\"),\n              content: Container(\n                width: double.maxFinite,\n                child: ListView(\n                  shrinkWrap: true,\n                  children: widget.mockUsers.map((user) {\n                    return CheckboxListTile(\n                      value: tempSelection.contains(user.id),\n                      title: Text(user.fullName),\n                      subtitle: Text(user.email),\n                      onChanged: (bool? value) {\n                        if (value == true && !tempSelection.contains(user.id)) {\n                          tempSelection.add(user.id);\n                        } else if (value == false) {\n                          tempSelection.remove(user.id);\n                        }\n                        setState(() {});\n                      },\n                    );\n                  }).toList(),\n                ),\n              ),\n              actions: [\n                TextButton(\n                  onPressed: () {\n                    Navigator.pop(context, tempSelection);\n                  },\n                  child: Text(\"OK\"),\n                ),\n              ],\n            );\n          },\n        );\n      }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":2016,"line":50,"column":40},"end":{"offset":3238,"line":83,"column":12},"text":"{\n            return AlertDialog(\n              title: Text(\"所有者を選択\"),\n              content: Container(\n                width: double.maxFinite,\n                child: ListView(\n                  shrinkWrap: true,\n                  children: widget.mockUsers.map((user) {\n                    return CheckboxListTile(\n                      value: tempSelection.contains(user.id),\n                      title: Text(user.fullName),\n                      subtitle: Text(user.email),\n                      onChanged: (bool? value) {\n                        if (value == true && !tempSelection.contains(user.id)) {\n                          tempSelection.add(user.id);\n                        } else if (value == false) {\n                          tempSelection.remove(user.id);\n                        }\n                        setState(() {});\n                      },\n                    );\n                  }).toList(),\n                ),\n              ),\n              actions: [\n                TextButton(\n                  onPressed: () {\n                    Navigator.pop(context, tempSelection);\n                  },\n                  child: Text(\"OK\"),\n                ),\n              ],\n            );\n          }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":2287,"line":57,"column":57},"end":{"offset":2924,"line":71,"column":20},"text":"{\n                    return CheckboxListTile(\n                      value: tempSelection.contains(user.id),\n                      title: Text(user.fullName),\n                      subtitle: Text(user.email),\n                      onChanged: (bool? value) {\n                        if (value == true && !tempSelection.contains(user.id)) {\n                          tempSelection.add(user.id);\n                        } else if (value == false) {\n                          tempSelection.remove(user.id);\n                        }\n                        setState(() {});\n                      },\n                    );\n                  }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":2543,"line":62,"column":48},"end":{"offset":2880,"line":69,"column":24},"text":"{\n                        if (value == true && !tempSelection.contains(user.id)) {\n                          tempSelection.add(user.id);\n                        } else if (value == false) {\n                          tempSelection.remove(user.id);\n                        }\n                        setState(() {});\n                      }"}},{"message":"If statement increases depth","codeSpan":{"start":{"offset":2624,"line":63,"column":80},"end":{"offset":2705,"line":65,"column":26},"text":"{\n                          tempSelection.add(user.id);\n                        }"}}]},{"metricsId":"number-of-parameters","value":2,"level":"none","comment":"This method has 2 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":42,"unitType":"lines","level":"none","comment":"This method has 42 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":1795,"line":45,"column":0},"end":{"offset":1795,"line":45,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1857,"line":46,"column":0},"end":{"offset":1857,"line":46,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1894,"line":47,"column":0},"end":{"offset":1894,"line":47,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1918,"line":48,"column":0},"end":{"offset":1918,"line":48,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1945,"line":49,"column":0},"end":{"offset":1945,"line":49,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1977,"line":50,"column":0},"end":{"offset":1977,"line":50,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2018,"line":51,"column":0},"end":{"offset":2018,"line":51,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2050,"line":52,"column":0},"end":{"offset":2050,"line":52,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2087,"line":53,"column":0},"end":{"offset":2087,"line":53,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2121,"line":54,"column":0},"end":{"offset":2121,"line":54,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2162,"line":55,"column":0},"end":{"offset":2162,"line":55,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2195,"line":56,"column":0},"end":{"offset":2195,"line":56,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2231,"line":57,"column":0},"end":{"offset":2231,"line":57,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2289,"line":58,"column":0},"end":{"offset":2289,"line":58,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2334,"line":59,"column":0},"end":{"offset":2334,"line":59,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2396,"line":60,"column":0},"end":{"offset":2396,"line":60,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2446,"line":61,"column":0},"end":{"offset":2446,"line":61,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2496,"line":62,"column":0},"end":{"offset":2496,"line":62,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2545,"line":63,"column":0},"end":{"offset":2545,"line":63,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2626,"line":64,"column":0},"end":{"offset":2626,"line":64,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2680,"line":65,"column":0},"end":{"offset":2680,"line":65,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2733,"line":66,"column":0},"end":{"offset":2733,"line":66,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2790,"line":67,"column":0},"end":{"offset":2790,"line":67,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2816,"line":68,"column":0},"end":{"offset":2816,"line":68,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2857,"line":69,"column":0},"end":{"offset":2857,"line":69,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2882,"line":70,"column":0},"end":{"offset":2882,"line":70,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2905,"line":71,"column":0},"end":{"offset":2905,"line":71,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2936,"line":72,"column":0},"end":{"offset":2936,"line":72,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2955,"line":73,"column":0},"end":{"offset":2955,"line":73,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2972,"line":74,"column":0},"end":{"offset":2972,"line":74,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":2997,"line":75,"column":0},"end":{"offset":2997,"line":75,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3025,"line":76,"column":0},"end":{"offset":3025,"line":76,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3059,"line":77,"column":0},"end":{"offset":3059,"line":77,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3118,"line":78,"column":0},"end":{"offset":3118,"line":78,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3139,"line":79,"column":0},"end":{"offset":3139,"line":79,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3176,"line":80,"column":0},"end":{"offset":3176,"line":80,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3195,"line":81,"column":0},"end":{"offset":3195,"line":81,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3212,"line":82,"column":0},"end":{"offset":3212,"line":82,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3227,"line":83,"column":0},"end":{"offset":3227,"line":83,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3240,"line":84,"column":0},"end":{"offset":3240,"line":84,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3251,"line":85,"column":0},"end":{"offset":3251,"line":85,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3260,"line":86,"column":0},"end":{"offset":3260,"line":86,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":42,"level":"none","comment":"This method has 42 maintainability index.","context":[]}]},"_InstrumentEditScreenState.build":{"codeSpan":{"start":{"offset":3286,"line":90,"column":3},"end":{"offset":8923,"line":234,"column":4},"text":"Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('楽器編集')),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            children: [\n              // フォーム上部右上に配置する保存ボタン\n              Align(\n                alignment: Alignment.topRight,\n                child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.blue[800],\n                    foregroundColor: Colors.white,\n                  ),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                  child: Text('保存'),\n                ),\n              ),\n              SizedBox(height: 16),\n              // Row 1: 「名称」と「所有者」(参照型)\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: modelController,\n                      decoration: InputDecoration(\n                        labelText: '名称',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: GestureDetector(\n                      onTap: () async {\n                        List<String>? result =\n                            await _showUserSelectionDialog(context, selectedOwnerIds);\n                        if (result != null) {\n                          setState(() {\n                            selectedOwnerIds = result;\n                          });\n                        }\n                      },\n                      child: InputDecorator(\n                        decoration: InputDecoration(\n                          labelText: '所有者',\n                          floatingLabelBehavior: FloatingLabelBehavior.always,\n                          contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                          border: OutlineInputBorder(),\n                        ),\n                        child: Text(\n                          selectedOwnerIds.isEmpty\n                              ? ''\n                              : selectedOwnerIds.map((id) {\n                                  final user = widget.mockUsers.firstWhere(\n                                    (u) => u.id == id,\n                                    orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                                  );\n                                  return user.fullName;\n                                }).join(', '),\n                          maxLines: 1,\n                          overflow: TextOverflow.ellipsis,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // Row 2: 保管場所\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: storageController,\n                      decoration: InputDecoration(\n                        labelText: '保管場所',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // Row 3: 「購入日」と「損耗度 (%)」\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: purchaseDateController,\n                      decoration: InputDecoration(\n                        labelText: '購入日',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: TextFormField(\n                      controller: wearDegreeController,\n                      decoration: InputDecoration(\n                        labelText: '損耗度 (%)',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                      keyboardType: TextInputType.number,\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // 簡単な説明（全幅）\n              TextFormField(\n                controller: shortDescriptionController,\n                decoration: InputDecoration(\n                  labelText: '簡単な説明',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              // 説明（複数行）\n              TextFormField(\n                controller: descriptionController,\n                decoration: InputDecoration(\n                  labelText: '説明',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n                maxLines: 3,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":3,"level":"none","comment":"This method has a cyclomatic complexity of 3.","context":[{"message":"If statement increases complexity","codeSpan":{"start":{"offset":4915,"line":133,"column":25},"end":{"offset":5087,"line":137,"column":26},"text":"if (result != null) {\n                          setState(() {\n                            selectedOwnerIds = result;\n                          });\n                        }"}},{"message":"Conditional expression increases complexity","codeSpan":{"start":{"offset":5559,"line":147,"column":27},"end":{"offset":6062,"line":155,"column":46},"text":"selectedOwnerIds.isEmpty\n                              ? ''\n                              : selectedOwnerIds.map((id) {\n                                  final user = widget.mockUsers.firstWhere(\n                                    (u) => u.id == id,\n                                    orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                                  );\n                                  return user.fullName;\n                                }).join(', ')"}}]},{"metricsId":"halstead-volume","value":1754.1514474243631,"level":"none","comment":"This method has a halstead volume of 1754.1514474243631.","context":[]},{"metricsId":"lines-of-code","value":146,"unitType":"lines","level":"none","comment":"This method has 146 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":4,"level":"none","comment":"This method has a nesting level of 4.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":3321,"line":90,"column":38},"end":{"offset":8923,"line":234,"column":4},"text":"{\n    return Scaffold(\n      appBar: AppBar(title: Text('楽器編集')),\n      body: Form(\n        key: _formKey,\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            children: [\n              // フォーム上部右上に配置する保存ボタン\n              Align(\n                alignment: Alignment.topRight,\n                child: ElevatedButton(\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: Colors.blue[800],\n                    foregroundColor: Colors.white,\n                  ),\n                  onPressed: () {\n                    Navigator.pop(context);\n                  },\n                  child: Text('保存'),\n                ),\n              ),\n              SizedBox(height: 16),\n              // Row 1: 「名称」と「所有者」(参照型)\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: modelController,\n                      decoration: InputDecoration(\n                        labelText: '名称',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: GestureDetector(\n                      onTap: () async {\n                        List<String>? result =\n                            await _showUserSelectionDialog(context, selectedOwnerIds);\n                        if (result != null) {\n                          setState(() {\n                            selectedOwnerIds = result;\n                          });\n                        }\n                      },\n                      child: InputDecorator(\n                        decoration: InputDecoration(\n                          labelText: '所有者',\n                          floatingLabelBehavior: FloatingLabelBehavior.always,\n                          contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                          border: OutlineInputBorder(),\n                        ),\n                        child: Text(\n                          selectedOwnerIds.isEmpty\n                              ? ''\n                              : selectedOwnerIds.map((id) {\n                                  final user = widget.mockUsers.firstWhere(\n                                    (u) => u.id == id,\n                                    orElse: () => User(id: id, firstName: id, lastName: '', email: '', role: ''),\n                                  );\n                                  return user.fullName;\n                                }).join(', '),\n                          maxLines: 1,\n                          overflow: TextOverflow.ellipsis,\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // Row 2: 保管場所\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: storageController,\n                      decoration: InputDecoration(\n                        labelText: '保管場所',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // Row 3: 「購入日」と「損耗度 (%)」\n              Row(\n                children: [\n                  Expanded(\n                    child: TextFormField(\n                      controller: purchaseDateController,\n                      decoration: InputDecoration(\n                        labelText: '購入日',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                    ),\n                  ),\n                  SizedBox(width: 16),\n                  Expanded(\n                    child: TextFormField(\n                      controller: wearDegreeController,\n                      decoration: InputDecoration(\n                        labelText: '損耗度 (%)',\n                        floatingLabelBehavior: FloatingLabelBehavior.always,\n                        contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                      ),\n                      keyboardType: TextInputType.number,\n                    ),\n                  ),\n                ],\n              ),\n              SizedBox(height: 16),\n              // 簡単な説明（全幅）\n              TextFormField(\n                controller: shortDescriptionController,\n                decoration: InputDecoration(\n                  labelText: '簡単な説明',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n              ),\n              SizedBox(height: 16),\n              // 説明（複数行）\n              TextFormField(\n                controller: descriptionController,\n                decoration: InputDecoration(\n                  labelText: '説明',\n                  floatingLabelBehavior: FloatingLabelBehavior.always,\n                  contentPadding: EdgeInsets.fromLTRB(12, 16, 12, 16),\n                ),\n                maxLines: 3,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":4755,"line":130,"column":39},"end":{"offset":5111,"line":138,"column":24},"text":"{\n                        List<String>? result =\n                            await _showUserSelectionDialog(context, selectedOwnerIds);\n                        if (result != null) {\n                          setState(() {\n                            selectedOwnerIds = result;\n                          });\n                        }\n                      }"}},{"message":"If statement increases depth","codeSpan":{"start":{"offset":4935,"line":133,"column":45},"end":{"offset":5087,"line":137,"column":26},"text":"{\n                          setState(() {\n                            selectedOwnerIds = result;\n                          });\n                        }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":4975,"line":134,"column":39},"end":{"offset":5059,"line":136,"column":28},"text":"{\n                            selectedOwnerIds = result;\n                          }"}}]},{"metricsId":"number-of-parameters","value":1,"level":"none","comment":"This method has 1 parameter.","context":[]},{"metricsId":"source-lines-of-code","value":137,"unitType":"lines","level":"none","comment":"This method has 137 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":3323,"line":91,"column":0},"end":{"offset":3323,"line":91,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3344,"line":92,"column":0},"end":{"offset":3344,"line":92,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3387,"line":93,"column":0},"end":{"offset":3387,"line":93,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3405,"line":94,"column":0},"end":{"offset":3405,"line":94,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3428,"line":95,"column":0},"end":{"offset":3428,"line":95,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3466,"line":96,"column":0},"end":{"offset":3466,"line":96,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3505,"line":97,"column":0},"end":{"offset":3505,"line":97,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3530,"line":98,"column":0},"end":{"offset":3530,"line":98,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3590,"line":100,"column":0},"end":{"offset":3590,"line":100,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3611,"line":101,"column":0},"end":{"offset":3611,"line":101,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3658,"line":102,"column":0},"end":{"offset":3658,"line":102,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3697,"line":103,"column":0},"end":{"offset":3697,"line":103,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3748,"line":104,"column":0},"end":{"offset":3748,"line":104,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3803,"line":105,"column":0},"end":{"offset":3803,"line":105,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3854,"line":106,"column":0},"end":{"offset":3854,"line":106,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3875,"line":107,"column":0},"end":{"offset":3875,"line":107,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3909,"line":108,"column":0},"end":{"offset":3909,"line":108,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3953,"line":109,"column":0},"end":{"offset":3953,"line":109,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":3974,"line":110,"column":0},"end":{"offset":3974,"line":110,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4011,"line":111,"column":0},"end":{"offset":4011,"line":111,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4030,"line":112,"column":0},"end":{"offset":4030,"line":112,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4047,"line":113,"column":0},"end":{"offset":4047,"line":113,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4123,"line":115,"column":0},"end":{"offset":4123,"line":115,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4142,"line":116,"column":0},"end":{"offset":4142,"line":116,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4170,"line":117,"column":0},"end":{"offset":4170,"line":117,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4198,"line":118,"column":0},"end":{"offset":4198,"line":118,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4240,"line":119,"column":0},"end":{"offset":4240,"line":119,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4291,"line":120,"column":0},"end":{"offset":4291,"line":120,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4342,"line":121,"column":0},"end":{"offset":4342,"line":121,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4383,"line":122,"column":0},"end":{"offset":4383,"line":122,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4460,"line":123,"column":0},"end":{"offset":4460,"line":123,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4537,"line":124,"column":0},"end":{"offset":4537,"line":124,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4562,"line":125,"column":0},"end":{"offset":4562,"line":125,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4585,"line":126,"column":0},"end":{"offset":4585,"line":126,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4606,"line":127,"column":0},"end":{"offset":4606,"line":127,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4645,"line":128,"column":0},"end":{"offset":4645,"line":128,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4673,"line":129,"column":0},"end":{"offset":4673,"line":129,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4717,"line":130,"column":0},"end":{"offset":4717,"line":130,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4757,"line":131,"column":0},"end":{"offset":4757,"line":131,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4804,"line":132,"column":0},"end":{"offset":4804,"line":132,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4891,"line":133,"column":0},"end":{"offset":4891,"line":133,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4937,"line":134,"column":0},"end":{"offset":4937,"line":134,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":4977,"line":135,"column":0},"end":{"offset":4977,"line":135,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5032,"line":136,"column":0},"end":{"offset":5032,"line":136,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5062,"line":137,"column":0},"end":{"offset":5062,"line":137,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5088,"line":138,"column":0},"end":{"offset":5088,"line":138,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5113,"line":139,"column":0},"end":{"offset":5113,"line":139,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5158,"line":140,"column":0},"end":{"offset":5158,"line":140,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5211,"line":141,"column":0},"end":{"offset":5211,"line":141,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5255,"line":142,"column":0},"end":{"offset":5255,"line":142,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5334,"line":143,"column":0},"end":{"offset":5334,"line":143,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5413,"line":144,"column":0},"end":{"offset":5413,"line":144,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5469,"line":145,"column":0},"end":{"offset":5469,"line":145,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5496,"line":146,"column":0},"end":{"offset":5496,"line":146,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5533,"line":147,"column":0},"end":{"offset":5533,"line":147,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5584,"line":148,"column":0},"end":{"offset":5584,"line":148,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5619,"line":149,"column":0},"end":{"offset":5619,"line":149,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5679,"line":150,"column":0},"end":{"offset":5679,"line":150,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5755,"line":151,"column":0},"end":{"offset":5755,"line":151,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5810,"line":152,"column":0},"end":{"offset":5810,"line":152,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5924,"line":153,"column":0},"end":{"offset":5924,"line":153,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":5961,"line":154,"column":0},"end":{"offset":5961,"line":154,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6017,"line":155,"column":0},"end":{"offset":6017,"line":155,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6064,"line":156,"column":0},"end":{"offset":6064,"line":156,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6103,"line":157,"column":0},"end":{"offset":6103,"line":157,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6162,"line":158,"column":0},"end":{"offset":6162,"line":158,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6189,"line":159,"column":0},"end":{"offset":6189,"line":159,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6214,"line":160,"column":0},"end":{"offset":6214,"line":160,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6237,"line":161,"column":0},"end":{"offset":6237,"line":161,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6258,"line":162,"column":0},"end":{"offset":6258,"line":162,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6277,"line":163,"column":0},"end":{"offset":6277,"line":163,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6294,"line":164,"column":0},"end":{"offset":6294,"line":164,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6359,"line":166,"column":0},"end":{"offset":6359,"line":166,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6378,"line":167,"column":0},"end":{"offset":6378,"line":167,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6406,"line":168,"column":0},"end":{"offset":6406,"line":168,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6434,"line":169,"column":0},"end":{"offset":6434,"line":169,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6476,"line":170,"column":0},"end":{"offset":6476,"line":170,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6529,"line":171,"column":0},"end":{"offset":6529,"line":171,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6580,"line":172,"column":0},"end":{"offset":6580,"line":172,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6623,"line":173,"column":0},"end":{"offset":6623,"line":173,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6700,"line":174,"column":0},"end":{"offset":6700,"line":174,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6777,"line":175,"column":0},"end":{"offset":6777,"line":175,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6802,"line":176,"column":0},"end":{"offset":6802,"line":176,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6825,"line":177,"column":0},"end":{"offset":6825,"line":177,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6846,"line":178,"column":0},"end":{"offset":6846,"line":178,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6865,"line":179,"column":0},"end":{"offset":6865,"line":179,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6882,"line":180,"column":0},"end":{"offset":6882,"line":180,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6958,"line":182,"column":0},"end":{"offset":6958,"line":182,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":6977,"line":183,"column":0},"end":{"offset":6977,"line":183,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7005,"line":184,"column":0},"end":{"offset":7005,"line":184,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7033,"line":185,"column":0},"end":{"offset":7033,"line":185,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7075,"line":186,"column":0},"end":{"offset":7075,"line":186,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7133,"line":187,"column":0},"end":{"offset":7133,"line":187,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7184,"line":188,"column":0},"end":{"offset":7184,"line":188,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7226,"line":189,"column":0},"end":{"offset":7226,"line":189,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7303,"line":190,"column":0},"end":{"offset":7303,"line":190,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7380,"line":191,"column":0},"end":{"offset":7380,"line":191,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7405,"line":192,"column":0},"end":{"offset":7405,"line":192,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7428,"line":193,"column":0},"end":{"offset":7428,"line":193,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7449,"line":194,"column":0},"end":{"offset":7449,"line":194,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7488,"line":195,"column":0},"end":{"offset":7488,"line":195,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7516,"line":196,"column":0},"end":{"offset":7516,"line":196,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7558,"line":197,"column":0},"end":{"offset":7558,"line":197,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7614,"line":198,"column":0},"end":{"offset":7614,"line":198,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7665,"line":199,"column":0},"end":{"offset":7665,"line":199,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7711,"line":200,"column":0},"end":{"offset":7711,"line":200,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7788,"line":201,"column":0},"end":{"offset":7788,"line":201,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7865,"line":202,"column":0},"end":{"offset":7865,"line":202,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7890,"line":203,"column":0},"end":{"offset":7890,"line":203,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7948,"line":204,"column":0},"end":{"offset":7948,"line":204,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7971,"line":205,"column":0},"end":{"offset":7971,"line":205,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":7992,"line":206,"column":0},"end":{"offset":7992,"line":206,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8011,"line":207,"column":0},"end":{"offset":8011,"line":207,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8028,"line":208,"column":0},"end":{"offset":8028,"line":208,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8091,"line":210,"column":0},"end":{"offset":8091,"line":210,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8120,"line":211,"column":0},"end":{"offset":8120,"line":211,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8176,"line":212,"column":0},"end":{"offset":8176,"line":212,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8221,"line":213,"column":0},"end":{"offset":8221,"line":213,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8259,"line":214,"column":0},"end":{"offset":8259,"line":214,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8330,"line":215,"column":0},"end":{"offset":8330,"line":215,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8401,"line":216,"column":0},"end":{"offset":8401,"line":216,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8420,"line":217,"column":0},"end":{"offset":8420,"line":217,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8437,"line":218,"column":0},"end":{"offset":8437,"line":218,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8498,"line":220,"column":0},"end":{"offset":8498,"line":220,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8527,"line":221,"column":0},"end":{"offset":8527,"line":221,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8578,"line":222,"column":0},"end":{"offset":8578,"line":222,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8623,"line":223,"column":0},"end":{"offset":8623,"line":223,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8658,"line":224,"column":0},"end":{"offset":8658,"line":224,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8729,"line":225,"column":0},"end":{"offset":8729,"line":225,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8800,"line":226,"column":0},"end":{"offset":8800,"line":226,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8819,"line":227,"column":0},"end":{"offset":8819,"line":227,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8848,"line":228,"column":0},"end":{"offset":8848,"line":228,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8865,"line":229,"column":0},"end":{"offset":8865,"line":229,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8880,"line":230,"column":0},"end":{"offset":8880,"line":230,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8893,"line":231,"column":0},"end":{"offset":8893,"line":231,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8904,"line":232,"column":0},"end":{"offset":8904,"line":232,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8913,"line":233,"column":0},"end":{"offset":8913,"line":233,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":31,"level":"none","comment":"This method has 31 maintainability index.","context":[]}]},"_InstrumentEditScreenState.dispose":{"codeSpan":{"start":{"offset":8939,"line":237,"column":3},"end":{"offset":9231,"line":246,"column":4},"text":"void dispose() {\n    modelController.dispose();\n    quantityController.dispose();\n    storageController.dispose();\n    purchaseDateController.dispose();\n    wearDegreeController.dispose();\n    shortDescriptionController.dispose();\n    descriptionController.dispose();\n    super.dispose();\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":45.0,"level":"none","comment":"This method has a halstead volume of 45.0.","context":[]},{"metricsId":"lines-of-code","value":11,"unitType":"lines","level":"none","comment":"This method has 11 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":1,"level":"none","comment":"This method has a nesting level of 1.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":8954,"line":237,"column":18},"end":{"offset":9231,"line":246,"column":4},"text":"{\n    modelController.dispose();\n    quantityController.dispose();\n    storageController.dispose();\n    purchaseDateController.dispose();\n    wearDegreeController.dispose();\n    shortDescriptionController.dispose();\n    descriptionController.dispose();\n    super.dispose();\n  }"}}]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This method has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":8,"unitType":"lines","level":"none","comment":"This method has 8 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":8956,"line":238,"column":0},"end":{"offset":8956,"line":238,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":8987,"line":239,"column":0},"end":{"offset":8987,"line":239,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":9021,"line":240,"column":0},"end":{"offset":9021,"line":240,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":9054,"line":241,"column":0},"end":{"offset":9054,"line":241,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":9092,"line":242,"column":0},"end":{"offset":9092,"line":242,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":9128,"line":243,"column":0},"end":{"offset":9128,"line":243,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":9170,"line":244,"column":0},"end":{"offset":9170,"line":244,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":9207,"line":245,"column":0},"end":{"offset":9207,"line":245,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":69,"level":"none","comment":"This method has 69 maintainability index.","context":[]}]}},"issues":[],"antiPatternCases":[]},{"path":"lib/main.dart","fileMetrics":[{"metricsId":"technical-debt","value":0.0,"level":"none","comment":"This compilation unit has 0.0 swe hours of debt.","context":[]}],"classes":{"MyApp":{"codeSpan":{"start":{"offset":1021,"line":38,"column":1},"end":{"offset":1389,"line":53,"column":2},"text":"class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: '打楽器管理システム',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      // 初期画面はホームダッシュボード。モックデータを渡します。\n      home: DashboardScreen(\n        mockUsers: mockUsers,\n        mockInstruments: mockInstruments,\n      ),\n    );\n  }\n}"},"metrics":[{"metricsId":"number-of-methods","value":1,"unitType":"method","level":"none","comment":"This class has 1 method.","context":[{"message":"method build increase metric value","codeSpan":{"start":{"offset":1073,"line":40,"column":3},"end":{"offset":1387,"line":52,"column":4},"text":"Widget build(BuildContext context) {\n    return MaterialApp(\n      title: '打楽器管理システム',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      // 初期画面はホームダッシュボード。モックデータを渡します。\n      home: DashboardScreen(\n        mockUsers: mockUsers,\n        mockInstruments: mockInstruments,\n      ),\n    );\n  }"}}]},{"metricsId":"weight-of-class","value":1.0,"level":"none","comment":"This class has a weight of 1.0.","context":[{"message":"functional method build increase metric value","codeSpan":{"start":{"offset":1073,"line":40,"column":3},"end":{"offset":1387,"line":52,"column":4},"text":"Widget build(BuildContext context) {\n    return MaterialApp(\n      title: '打楽器管理システム',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      // 初期画面はホームダッシュボード。モックデータを渡します。\n      home: DashboardScreen(\n        mockUsers: mockUsers,\n        mockInstruments: mockInstruments,\n      ),\n    );\n  }"}}]}]}},"functions":{"main":{"codeSpan":{"start":{"offset":985,"line":34,"column":1},"end":{"offset":1019,"line":36,"column":2},"text":"void main() {\n  runApp(MyApp());\n}"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This function has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":2.0,"level":"none","comment":"This function has a halstead volume of 2.0.","context":[]},{"metricsId":"lines-of-code","value":3,"unitType":"lines","level":"none","comment":"This function has 3 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":1,"level":"none","comment":"This function has a nesting level of 1.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":997,"line":34,"column":13},"end":{"offset":1019,"line":36,"column":2},"text":"{\n  runApp(MyApp());\n}"}}]},{"metricsId":"number-of-parameters","value":0,"level":"none","comment":"This function has 0 parameters.","context":[]},{"metricsId":"source-lines-of-code","value":1,"unitType":"line","level":"none","comment":"This function has 1 source line of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":999,"line":35,"column":0},"end":{"offset":999,"line":35,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":98,"level":"none","comment":"This function has 98 maintainability index.","context":[]}]},"MyApp.build":{"codeSpan":{"start":{"offset":1073,"line":40,"column":3},"end":{"offset":1387,"line":52,"column":4},"text":"Widget build(BuildContext context) {\n    return MaterialApp(\n      title: '打楽器管理システム',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      // 初期画面はホームダッシュボード。モックデータを渡します。\n      home: DashboardScreen(\n        mockUsers: mockUsers,\n        mockInstruments: mockInstruments,\n      ),\n    );\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":44.97261104228487,"level":"none","comment":"This method has a halstead volume of 44.97261104228487.","context":[]},{"metricsId":"lines-of-code","value":14,"unitType":"lines","level":"none","comment":"This method has 14 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":1,"level":"none","comment":"This method has a nesting level of 1.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":1108,"line":40,"column":38},"end":{"offset":1387,"line":52,"column":4},"text":"{\n    return MaterialApp(\n      title: '打楽器管理システム',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      // 初期画面はホームダッシュボード。モックデータを渡します。\n      home: DashboardScreen(\n        mockUsers: mockUsers,\n        mockInstruments: mockInstruments,\n      ),\n    );\n  }"}}]},{"metricsId":"number-of-parameters","value":1,"level":"none","comment":"This method has 1 parameter.","context":[]},{"metricsId":"source-lines-of-code","value":10,"unitType":"lines","level":"none","comment":"This method has 10 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":1110,"line":41,"column":0},"end":{"offset":1110,"line":41,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1134,"line":42,"column":0},"end":{"offset":1134,"line":42,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1160,"line":43,"column":0},"end":{"offset":1160,"line":43,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1184,"line":44,"column":0},"end":{"offset":1184,"line":44,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1220,"line":45,"column":0},"end":{"offset":1220,"line":45,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1267,"line":47,"column":0},"end":{"offset":1267,"line":47,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1296,"line":48,"column":0},"end":{"offset":1296,"line":48,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1326,"line":49,"column":0},"end":{"offset":1326,"line":49,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1368,"line":50,"column":0},"end":{"offset":1368,"line":50,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1377,"line":51,"column":0},"end":{"offset":1377,"line":51,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":67,"level":"none","comment":"This method has 67 maintainability index.","context":[]}]}},"issues":[],"antiPatternCases":[]},{"path":"lib/widgets/app_drawer.dart","fileMetrics":[{"metricsId":"technical-debt","value":0.0,"level":"none","comment":"This compilation unit has 0.0 swe hours of debt.","context":[]}],"classes":{"AppDrawer":{"codeSpan":{"start":{"offset":244,"line":7,"column":1},"end":{"offset":1863,"line":65,"column":2},"text":"class AppDrawer extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Drawer(\n      child: ListView(\n        children: <Widget>[\n          DrawerHeader(\n            child: Text(\n              'メニュー',\n              style: TextStyle(fontSize: 24, color: Colors.white),\n            ),\n            decoration: BoxDecoration(color: Colors.blue),\n          ),\n          ListTile(\n            title: Text('ホーム'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => DashboardScreen(\n                    mockUsers: mockUsers,\n                    mockInstruments: mockInstruments,\n                  ),\n                ),\n              );\n            },\n          ),\n          ListTile(\n            title: Text('楽器一覧'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => InstrumentListScreen(\n                    mockInstruments: mockInstruments,\n                    mockUsers: mockUsers,\n                  ),\n                ),\n              );\n            },\n          ),\n          ListTile(\n            title: Text('ユーザー一覧'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => UserListScreen(\n                    mockUsers: mockUsers,\n                  ),\n                ),\n              );\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}"},"metrics":[{"metricsId":"number-of-methods","value":1,"unitType":"method","level":"none","comment":"This class has 1 method.","context":[{"message":"method build increase metric value","codeSpan":{"start":{"offset":300,"line":9,"column":3},"end":{"offset":1861,"line":64,"column":4},"text":"Widget build(BuildContext context) {\n    return Drawer(\n      child: ListView(\n        children: <Widget>[\n          DrawerHeader(\n            child: Text(\n              'メニュー',\n              style: TextStyle(fontSize: 24, color: Colors.white),\n            ),\n            decoration: BoxDecoration(color: Colors.blue),\n          ),\n          ListTile(\n            title: Text('ホーム'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => DashboardScreen(\n                    mockUsers: mockUsers,\n                    mockInstruments: mockInstruments,\n                  ),\n                ),\n              );\n            },\n          ),\n          ListTile(\n            title: Text('楽器一覧'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => InstrumentListScreen(\n                    mockInstruments: mockInstruments,\n                    mockUsers: mockUsers,\n                  ),\n                ),\n              );\n            },\n          ),\n          ListTile(\n            title: Text('ユーザー一覧'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => UserListScreen(\n                    mockUsers: mockUsers,\n                  ),\n                ),\n              );\n            },\n          ),\n        ],\n      ),\n    );\n  }"}}]},{"metricsId":"weight-of-class","value":1.0,"level":"none","comment":"This class has a weight of 1.0.","context":[{"message":"functional method build increase metric value","codeSpan":{"start":{"offset":300,"line":9,"column":3},"end":{"offset":1861,"line":64,"column":4},"text":"Widget build(BuildContext context) {\n    return Drawer(\n      child: ListView(\n        children: <Widget>[\n          DrawerHeader(\n            child: Text(\n              'メニュー',\n              style: TextStyle(fontSize: 24, color: Colors.white),\n            ),\n            decoration: BoxDecoration(color: Colors.blue),\n          ),\n          ListTile(\n            title: Text('ホーム'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => DashboardScreen(\n                    mockUsers: mockUsers,\n                    mockInstruments: mockInstruments,\n                  ),\n                ),\n              );\n            },\n          ),\n          ListTile(\n            title: Text('楽器一覧'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => InstrumentListScreen(\n                    mockInstruments: mockInstruments,\n                    mockUsers: mockUsers,\n                  ),\n                ),\n              );\n            },\n          ),\n          ListTile(\n            title: Text('ユーザー一覧'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => UserListScreen(\n                    mockUsers: mockUsers,\n                  ),\n                ),\n              );\n            },\n          ),\n        ],\n      ),\n    );\n  }"}}]}]}},"functions":{"AppDrawer.build":{"codeSpan":{"start":{"offset":300,"line":9,"column":3},"end":{"offset":1861,"line":64,"column":4},"text":"Widget build(BuildContext context) {\n    return Drawer(\n      child: ListView(\n        children: <Widget>[\n          DrawerHeader(\n            child: Text(\n              'メニュー',\n              style: TextStyle(fontSize: 24, color: Colors.white),\n            ),\n            decoration: BoxDecoration(color: Colors.blue),\n          ),\n          ListTile(\n            title: Text('ホーム'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => DashboardScreen(\n                    mockUsers: mockUsers,\n                    mockInstruments: mockInstruments,\n                  ),\n                ),\n              );\n            },\n          ),\n          ListTile(\n            title: Text('楽器一覧'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => InstrumentListScreen(\n                    mockInstruments: mockInstruments,\n                    mockUsers: mockUsers,\n                  ),\n                ),\n              );\n            },\n          ),\n          ListTile(\n            title: Text('ユーザー一覧'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => UserListScreen(\n                    mockUsers: mockUsers,\n                  ),\n                ),\n              );\n            },\n          ),\n        ],\n      ),\n    );\n  }"},"metrics":[{"metricsId":"cyclomatic-complexity","value":1,"level":"none","comment":"This method has a cyclomatic complexity of 1.","context":[]},{"metricsId":"halstead-volume","value":535.0532015217826,"level":"none","comment":"This method has a halstead volume of 535.0532015217826.","context":[]},{"metricsId":"lines-of-code","value":57,"unitType":"lines","level":"none","comment":"This method has 57 lines of code.","context":[]},{"metricsId":"maximum-nesting-level","value":2,"level":"none","comment":"This method has a nesting level of 2.","context":[{"message":"Block function body increases depth","codeSpan":{"start":{"offset":335,"line":9,"column":38},"end":{"offset":1861,"line":64,"column":4},"text":"{\n    return Drawer(\n      child: ListView(\n        children: <Widget>[\n          DrawerHeader(\n            child: Text(\n              'メニュー',\n              style: TextStyle(fontSize: 24, color: Colors.white),\n            ),\n            decoration: BoxDecoration(color: Colors.blue),\n          ),\n          ListTile(\n            title: Text('ホーム'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => DashboardScreen(\n                    mockUsers: mockUsers,\n                    mockInstruments: mockInstruments,\n                  ),\n                ),\n              );\n            },\n          ),\n          ListTile(\n            title: Text('楽器一覧'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => InstrumentListScreen(\n                    mockInstruments: mockInstruments,\n                    mockUsers: mockUsers,\n                  ),\n                ),\n              );\n            },\n          ),\n          ListTile(\n            title: Text('ユーザー一覧'),\n            onTap: () {\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => UserListScreen(\n                    mockUsers: mockUsers,\n                  ),\n                ),\n              );\n            },\n          ),\n        ],\n      ),\n    );\n  }"}},{"message":"Block function body increases depth","codeSpan":{"start":{"offset":706,"line":22,"column":23},"end":{"offset":1032,"line":32,"column":14},"text":"{\n              Navigator.pushReplacement(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => DashboardScreen(\n                    mockUsers: mockUsers,\n                    mockInstruments: mockInstruments,\n                  ),\n                ),\n              );\n            }"}}]},{"metricsId":"number-of-parameters","value":1,"level":"none","comment":"This method has 1 parameter.","context":[]},{"metricsId":"source-lines-of-code","value":54,"unitType":"lines","level":"none","comment":"This method has 54 source lines of code.","context":[{"message":"line contains source code","codeSpan":{"start":{"offset":337,"line":10,"column":0},"end":{"offset":337,"line":10,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":356,"line":11,"column":0},"end":{"offset":356,"line":11,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":379,"line":12,"column":0},"end":{"offset":379,"line":12,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":407,"line":13,"column":0},"end":{"offset":407,"line":13,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":431,"line":14,"column":0},"end":{"offset":431,"line":14,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":456,"line":15,"column":0},"end":{"offset":456,"line":15,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":478,"line":16,"column":0},"end":{"offset":478,"line":16,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":545,"line":17,"column":0},"end":{"offset":545,"line":17,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":560,"line":18,"column":0},"end":{"offset":560,"line":18,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":619,"line":19,"column":0},"end":{"offset":619,"line":19,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":632,"line":20,"column":0},"end":{"offset":632,"line":20,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":652,"line":21,"column":0},"end":{"offset":652,"line":21,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":684,"line":22,"column":0},"end":{"offset":684,"line":22,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":708,"line":23,"column":0},"end":{"offset":708,"line":23,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":749,"line":24,"column":0},"end":{"offset":749,"line":24,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":774,"line":25,"column":0},"end":{"offset":774,"line":25,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":809,"line":26,"column":0},"end":{"offset":809,"line":26,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":866,"line":27,"column":0},"end":{"offset":866,"line":27,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":908,"line":28,"column":0},"end":{"offset":908,"line":28,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":962,"line":29,"column":0},"end":{"offset":962,"line":29,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":983,"line":30,"column":0},"end":{"offset":983,"line":30,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1002,"line":31,"column":0},"end":{"offset":1002,"line":31,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1019,"line":32,"column":0},"end":{"offset":1019,"line":32,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1034,"line":33,"column":0},"end":{"offset":1034,"line":33,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1047,"line":34,"column":0},"end":{"offset":1047,"line":34,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1067,"line":35,"column":0},"end":{"offset":1067,"line":35,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1100,"line":36,"column":0},"end":{"offset":1100,"line":36,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1124,"line":37,"column":0},"end":{"offset":1124,"line":37,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1165,"line":38,"column":0},"end":{"offset":1165,"line":38,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1190,"line":39,"column":0},"end":{"offset":1190,"line":39,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1225,"line":40,"column":0},"end":{"offset":1225,"line":40,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1287,"line":41,"column":0},"end":{"offset":1287,"line":41,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1341,"line":42,"column":0},"end":{"offset":1341,"line":42,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1383,"line":43,"column":0},"end":{"offset":1383,"line":43,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1404,"line":44,"column":0},"end":{"offset":1404,"line":44,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1423,"line":45,"column":0},"end":{"offset":1423,"line":45,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1440,"line":46,"column":0},"end":{"offset":1440,"line":46,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1455,"line":47,"column":0},"end":{"offset":1455,"line":47,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1468,"line":48,"column":0},"end":{"offset":1468,"line":48,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1488,"line":49,"column":0},"end":{"offset":1488,"line":49,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1523,"line":50,"column":0},"end":{"offset":1523,"line":50,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1547,"line":51,"column":0},"end":{"offset":1547,"line":51,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1588,"line":52,"column":0},"end":{"offset":1588,"line":52,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1613,"line":53,"column":0},"end":{"offset":1613,"line":53,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1648,"line":54,"column":0},"end":{"offset":1648,"line":54,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1704,"line":55,"column":0},"end":{"offset":1704,"line":55,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1746,"line":56,"column":0},"end":{"offset":1746,"line":56,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1767,"line":57,"column":0},"end":{"offset":1767,"line":57,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1786,"line":58,"column":0},"end":{"offset":1786,"line":58,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1803,"line":59,"column":0},"end":{"offset":1803,"line":59,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1818,"line":60,"column":0},"end":{"offset":1818,"line":60,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1831,"line":61,"column":0},"end":{"offset":1831,"line":61,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1842,"line":62,"column":0},"end":{"offset":1842,"line":62,"column":0},"text":""}},{"message":"line contains source code","codeSpan":{"start":{"offset":1851,"line":63,"column":0},"end":{"offset":1851,"line":63,"column":0},"text":""}}]},{"metricsId":"maintainability-index","value":43,"level":"none","comment":"This method has 43 maintainability index.","context":[]}]}},"issues":[],"antiPatternCases":[]}],"summary":[{"status":"none","title":"Scanned folders","value":["lib"],"violations":0},{"status":"none","title":"Total scanned files","value":9,"violations":0},{"status":"none","title":"Total lines of source code","value":561,"violations":0},{"status":"none","title":"Total classes","value":11,"violations":0},{"status":"none","title":"Average Cyclomatic Number per line of code","value":0.0748663101604278,"violations":0},{"status":"none","title":"Average Source Lines of Code per method","value":20,"violations":0},{"status":"none","title":"Total tech debt","value":"not found","violations":0}]}